<!DOCTYPE html>
<html lang="ru">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta http-equiv="MSThemeCompatible" content="yes" />
<meta http-equiv="X-UA-Compatible" content="IE=8" />
<hta:application
    id="PtkBro"
    applicationName="ПТК ПСД - Обозреватель отчетности"
    icon="icon.ico"
    scroll="no"
    contextMenu="no"
    singleinstance="no"
    version="6.10.0"
    author="mozers™, mozers*mail.ru"
    coauthor="Dmitrii Evdokimov, diev*mail.ru (this version)"
    update="http://diev.github.io/PTK-PSD-Browser-hta"
/>
<!--
Copyright 2010-2021 Сергей Мозеров, Дмитрий Евдокимов

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<script type="text/javascript" language="JavaScript">
'use strict()';

// Рабочие размеры окна приложения
var PadXY = (function() {
    var x, y;
    var cookie = Cookie('window');
    if (cookie) {
        var w = cookie.split(',');
        window.moveTo(w[0], w[1]);
        window.resizeTo(w[2], w[3]);
        x = w[2] - document.documentElement.clientWidth;
        y = w[3] - document.documentElement.clientHeight;
    } else {
        x = screen.width / 6;
        y = screen.height / 6;
        window.moveTo(x, y);
        x *= 4;
        y *= 4;
        window.resizeTo(x, y);
        x -= document.documentElement.clientWidth;
        y -= document.documentElement.clientHeight;
    }
    return [x, y];
})();

//=====================================================
//  ОБЪЯВЛЕНИЯ ГЛОБАЛЬНЫХ ПЕРЕМЕННЫХ
//=====================================================
var INI = {};                       // объект, хранящий в виде параметров все ключи ini-файла и глобальные переменные
var arrDB = [];                     // массив, хранящий текущую выборку из БД
var Cache = {};                     // объект, хранящий результаты обработки содержимого файлов
var ContextMenu;                    // объект контекстное меню
var WshShell, FSO;                  // ActiveX объекты

var AccessOrSQL = 0;                // автоопределение (0 - нет значения, 1 или 2, -1 - иная ошибка)

var id_cursor;                      // индекс строки над которой находится курсор мыши
var id_selected;                    // индекс выделенной строки списка = индексу выборки из БД
var filePathNameTime_selected = ''; // полный путь к выделенному в списке файлу = GetFilePathById(id_selected)
var file_clicked_in_preview = '';   // имя файла в окне предпросмотра, на котором кликнули мышью

var find_text = '';                 // строка, содержащая часть имени файла для поиска связанных с этим файлом документов

var breakLoad = false;              // была ли кликнута кнопка Прервать пользователем
var debug = true;                   // переменная, если надо что-то протестировать на несколько итераций

//=====================================================
//  ОБЩИЕ ФУНКЦИИ
//=====================================================

function Debug(text) {
    if (debug) {
        var wsh = new ActiveXObject('WScript.Shell');
        debug = wsh.Popup(text, 0, 'Debug ' + PtkBro.version + ' - продолжать?', 36) === 6; //[Yes]NoBox
    }
}

// Получение параметров командной строки в виде массива строк без кавычек, если они были
function ReadArgs() {
    var args = [];
    var matches = PtkBro.commandLine.match(/((?!"([^"]+)")\b(\S+)\b|"([^"]+)")/g);
    if (matches) {
        for (var i = 0, l = matches.length; i < l; i++) {
            args[i] = matches[i].replace(/^"(.*)"$/, '$1');
        }
    }
    return args;
}

// Сравнение версий (0<, 0, >0)
function cmpVersions(a, b) {
    var diff;
    var regExStrip0 = /(\.0+)+$/;
    var segmentsA = a.replace(regExStrip0, '').split('.');
    var segmentsB = b.replace(regExStrip0, '').split('.');
    var minLength = Math.min(segmentsA.length, segmentsB.length);

    for (var i = 0; i < minLength; i++) {
        diff = parseInt(segmentsA[i], 10) - parseInt(segmentsB[i], 10);
        if (diff) {
            return diff;
        }
    }
    return segmentsA.length - segmentsB.length;
}

// Возвращает строку с подставленными параметрами типа 'Hello, {0}!'.format('World')
String.prototype.format = function() {
    var args = arguments;
    return this.replace(/{(\d+)}/g, function(match, number) {
        return (typeof args[number] !== 'undefined') ?
            args[number] : match;
    });
};

// Возвращает число (0-255), указывающее значение кода символа (в кодировке win1251) по заданному индексу
String.prototype.charCode1251 = function(pos) {
    var n = this.charCodeAt(pos);
    if (n < 128) { //0..127 ASCII
        return n;
    }
    switch (n) { //128..191
        case 1026: return 128;
        case 1027: return 129;
        case 8218: return 130;
        case 1107: return 131;
        case 8222: return 132;
        case 8230: return 133;
        case 8224: return 134;
        case 8225: return 135;
        case 8364: return 136;
        case 8240: return 137;
        case 1033: return 138;
        case 8249: return 139;
        case 1034: return 140;
        case 1036: return 141;
        case 1035: return 142;
        case 1039: return 143;
        case 1106: return 144;
        case 8216: return 145;
        case 8217: return 146;
        case 8220: return 147;
        case 8221: return 148;
        case 8226: return 149;
        case 8211: return 150;
        case 8212: return 151;
        case  152: return 152;
        case 8482: return 153;
        case 1113: return 154;
        case 8250: return 155;
        case 1114: return 156;
        case 1116: return 157;
        case 1115: return 158;
        case 1119: return 159;
        case  160: return 160;
        case 1038: return 161;
        case 1118: return 162;
        case 1032: return 163;
        case  164: return 164;
        case 1168: return 165;
        case  166: return 166;
        case  167: return 167;
        case 1025: return 168;
        case  169: return 169;
        case 1028: return 170;
        case  171: return 171;
        case  172: return 172;
        case  173: return 173;
        case  174: return 174;
        case 1031: return 175;
        case  176: return 176;
        case  177: return 177;
        case 1030: return 178;
        case 1110: return 179;
        case 1169: return 180;
        case  181: return 181;
        case  182: return 182;
        case  183: return 183;
        case 1105: return 184;
        case 8470: return 185;
        case 1108: return 186;
        case  187: return 187;
        case 1112: return 188;
        case 1029: return 189;
        case 1109: return 190;
        case 1111: return 191;

        default: //192..255
            return n - 848;
    }
};

// Возвращает текст, удаляя PKCS #7 подпись
function GetTextFromPKCS7(s) {
    // ищем OID 1.2.840.113549.1.7.1 и байт A0 следом:
    // HEX: 06 09 2A 86 48 86 F7 0D 01 07 01 A0
    var oid = '\u0006\u0009\u002a\u2020\u0048\u2020\u0447\u000d\u0001\u0007\u0001\u00a0';
    var pos = s.indexOf(oid, 20); // первые порядка 20 байтов можно смело пропустить при поиске
    if (pos < 0) {
        return;
    } // если найдено, то
    // смещаемся на конец oid.length за байт A0 и читаем байт длины (или 81, или 82, или 83 и далее могут быть)
    var b = s.charCodeAt(pos += 12);
    if (b === 1027) {        // если 0x81 (129..255) - пропускаем еще 1 байт
        pos++;
    } else if (b === 8218) { // если 0x82 (256..64К) - пропускаем еще 2 байта
        pos += 2;
    } else if (b === 1107) { // если 0x83 (64К..16М) - пропускаем еще 3 байта
        pos += 3;
    } else if (b === 8222) { // если 0x84 (16М..4Г) - пропускаем еще 4 байта
        pos += 4;
    } else { // (или 1..128, или же невероятные 4Г+ при 0x85 и т.д.)
        // return;
    }

    pos++;
    b = s.charCodeAt(pos++);
    if (b !== 4) {
        return; // проверка наличия байта 0x04
    }

    var len = 0;
    b = s.charCodeAt(pos++);
    if (b === 1027) {        // если 0x81 - читаем другой 1 байт
        len = s.charCode1251(pos++);
    } else if (b === 8218) { // если 0x82 - читаем в 2 байтах
        len = s.charCode1251(pos++) * 256 + s.charCode1251(pos++);
    } else if (b === 1107) { // если 0x83 - читаем в 3 байтах
        len = s.charCode1251(pos++) * 65536 + s.charCode1251(pos++) * 256 + s.charCode1251(pos++);
    } else if (b === 8222) { // если 0x84 - читаем в 4 байтах
        len = s.charCode1251(pos++) * 16777216 + s.charCode1251(pos++) * 65536 + s.charCode1251(pos++) * 256 + s.charCode1251(pos++);
    } else {                 // читаем байт длины (если менее 0x81, а вот с 4Г+ будет баг)
        len = s.charCode1251(pos - 1);
    }                        // от этой позиции читаем искомый текст вычисленной длины
    return s.substr(pos, len);
}

// Возвращает данные в файле, удаляя PKCS #7 подпись
function GetFileFromPKCS7(filename) {
    var s = ReadFile(filename);
    var data = GetTextFromPKCS7(s);
    if (data) {
        SaveFile(filename, data);
    }
}

// Вывод всплывающего окна с сообщением pText
function Popup(pText) {
    var hhControl = new ActiveXObject('Internet.HHCtrl.1');
    if (hhControl) {
        var pStyle = 'MS Sans Serif, 8, , plain';
        hhControl.TextPopup(pText, pStyle, 4, 4, -1, -1);
    } else {
        WshShell.Popup(selected, 1, pText, 64);
    }
}

function MsgBox(pText, pCaption) {
    WshShell.Popup(pText, 0, pCaption || PtkBro.applicationName, 64);
}

function ErrBox(pText, pCaption) {
    WshShell.Popup(pText, 0, pCaption || ('Ошибка ' + PtkBro.applicationName), 48);
}

function YesNoBox(pText, pCaption) {
    return WshShell.Popup(pText, 0, pCaption || ('Вопрос ' + PtkBro.applicationName), 36) === 6; //Yes
}

// Выполняет SQL запрос к БД ПТК ПСД
// Входные данные: текст SQL запроса, массив с параметрами
// Возвращает: массив из объектов. Имена каждого свойства объекта идентичны именам полей.
function QueryDatabase(sql_query, params) {
    // Преобразовывает даты в строки дат для MS Access ('dd.mm.yyyy')
    function Period2Access(period) {
        return [Date2Cal(period[0]), Date2Cal(period[1])];
    }

    // Преобразовывает даты в строки дат для MS SQL и Oracle ('d-mmm-yyyy')
    function Period2SQL(period) {
        var d0 = period[0];
        var d1 = period[1];
        var mmm = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];
        return [
            [d0.getDate(), mmm[d0.getMonth()], d0.getFullYear()].join('-'),
            [d1.getDate(), mmm[d1.getMonth()], d1.getFullYear()].join('-')
        ];
    }

    if (!INI.DataBase.db_connect_string) {
        return [];
    }

    var q;
    if (/between/i.test(sql_query)) {
        if (AccessOrSQL == 1) {
            params = Period2Access(params);
        } else if (AccessOrSQL == 2) {
            params = Period2SQL(params);
        } else { // init
            AccessOrSQL = 2;
            var period = Period2SQL(params);
            q = TryQueryDatabase(sql_query, period);
            if (!q.Error) {
                return q.Result;
            }
            AccessOrSQL = 1;
            period = Period2Access(params);
            q = TryQueryDatabase(sql_query, period);
            if (!q.Error) {
                return q.Result;
            }
            AccessOrSQL = -1;
            ErrBox([q.Description, sql_query, period, 'Не удалось определить формат передачи дат' ||
                ''].join('\n\n'), 'Ошибка запроса к базе данных');
            return [];
        }
    }
    q = TryQueryDatabase(sql_query, params);
    if (q.Error) {
        ErrBox([q.Description, sql_query, params || ''].join('\n\n'), 'Ошибка запроса к базе данных');
        return [];
    }
    return q.Result;
}

function TryQueryDatabase(sql_query, params) {
    var arrResult = [], recno = 0;
    var error = false;
    var err_description;

    var ADODBConnection = new ActiveXObject('ADODB.Connection');
    var cmd = new ActiveXObject('ADODB.Command');
    try {
        ADODBConnection.Open(INI.DataBase.db_connect_string);
        cmd.ActiveConnection = ADODBConnection;
        cmd.CommandType = 1; // adCmdText
        cmd.CommandText = sql_query;
        var objRecordSet = cmd.Execute(null, params ? params : null);
        var count = objRecordSet.Fields.Count;
        if (count > 0) {
            while (!objRecordSet.EOF) {
                var rec = {};
                for (var f = 0; f < count; f++) {
                    rec[objRecordSet.Fields(f).Name.toLowerCase()] = objRecordSet(f).Value;
                }
                arrResult[recno++] = rec;
                objRecordSet.MoveNext();
            }
        }
    } catch (e) {
        error = true;
        err_description = e.description;
    }
    finally {
        if (ADODBConnection.State == 1) {//adStateOpen
            ADODBConnection.Close();
        }
        ADODBConnection = null;
    }

    return {
        Result: arrResult,
        Error: error,
        Description: err_description
    };
}

// Чтение файла
// Если кол-во байт (bytes_read) не указано, то читается весь файл
function ReadText(filename, bytes_read) {
    var content = '';
    if (FSO.FileExists(filename) && FSO.GetFile(filename).Size > 0) {
        var file = FSO.OpenTextFile(filename, 1); //1-read,2-write,8-append;;0-ascii,-1-unicode,-2-default
        content = bytes_read ?
            file.Read(bytes_read) : file.ReadAll();
        file.Close();
    }
    return content;
}

function ReadUtf8Text(filename, bytes_read) {
    var content = '';
    if (FSO.FileExists(filename) && FSO.GetFile(filename).Size > 0) {
        var file = FSO.OpenTextFile(filename, 1, false, -1); //1-read,2-write,8-append;false;0-ascii,-1-unicode,-2-default
        content = bytes_read ?
            file.Read(bytes_read) : file.ReadAll();
        file.Close();
    }
    return content;
}

function ReadFile(filename, bytes_read, file_charset) {
    var content = '';
    if (FSO.FileExists(filename) && FSO.GetFile(filename).Size > 0) {
        var stream = new ActiveXObject('ADODB.Stream');
        stream.Type = 2; // adTypeText
        stream.Charset = file_charset || 'windows-1251';
        try {
            stream.Open();
            stream.LoadFromFile(filename);
            content = bytes_read ?
                stream.readText(bytes_read) : stream.readText();
        } catch (e) {
            ErrBox(['Не удается прочитать файл ' + filename, '',
                'Возможно, это из-за сетевых настроек безопасности Internet Explorer. ' +
                'Установка локально могла бы решить эту проблему:', '',
                e.description].join('\n'),
                'Чтение файла');
        }
        finally {
            stream.Close();
        }
    }
    return content;
}

// Сохранение текста в файле
function SaveFile(filename, text, file_charset) {
    var stream = new ActiveXObject('ADODB.Stream');
    stream.Type = 2; // adTypeText
    stream.Charset = file_charset || 'windows-1251';
    stream.Open();
    stream.WriteText(text);
    stream.SaveToFile(filename, 2);
    stream.Close();
}

// Перекодировщик текста из кодировки cp_in в кодировку cp_out (перечень доступных - HKEY_CLASSES_ROOT\MIME\Database\Charset)
function Recode(text_in, cp_in, cp_out) {
    if (cp_in === cp_out) {
        return text_in;
    }
    var stream = new ActiveXObject('ADODB.Stream');
    stream.Type = 2; // adTypeText
    stream.Charset = cp_out;
    stream.Open();
    stream.WriteText(text_in);
    stream.Flush();
    stream.Position = 0;
    stream.Charset = cp_in;
    var text_out;
    try {
        text_out = stream.ReadText(-1);
    }
    catch (e) {
        text_out = text_in;
    }
    finally {
        stream.Close();
    }
    return text_out;
}

// Возвращает результат скрытого запуска консольной команды в заданном каталоге как объект
// obj.ExitCode содержит код завершения процесса
// obj.Output   содержит текст вывода
//function ExecHide(command, work_dir) { //not used
function ExecHide(command) {
    //var cur_dir;
    var file_output = FSO.BuildPath(INI.temp, FSO.GetTempName());
    //if (work_dir && FSO.FolderExists(work_dir)) {
    //    cur_dir = WshShell.CurrentDirectory;
    //    WshShell.CurrentDirectory = work_dir;
    //}
    var cmd = '%comspec% /c ({0}) > "{1}" 2<&1'.format(command, file_output);
    var err = WshShell.Run(cmd, 0, true);
    //if (cur_dir) {
    //    WshShell.CurrentDirectory = cur_dir;
    //}
    var out = '';
    if (FSO.FileExists(file_output)) {
        var file= FSO.OpenTextFile(file_output, 1);
        out = file.ReadAll();
        file.Close();
        FSO.DeleteFile(file_output, true);
    }
    return {
        ExitCode: err,
        Output: out
    };
}

// Получить строку версии 7-Zip
function UnpackerVer(unpacker) {
    var log = FSO.BuildPath(INI.temp, FSO.GetTempName());
    var cmd = '%comspec% /c ("{0}") > "{1}" 2<&1'.format(unpacker, log);
    var err = WshShell.Run(cmd, 0, true);
    if (err !== 0) {
        return '';
    }
    var text = '';
    if (FSO.FileExists(log)) {
        var file= FSO.OpenTextFile(log, 1);
        text = file.ReadAll();
        file.Close();
        FSO.DeleteFile(log, true);
    }
    var ver = /^7-Zip (\[64\] |\[32\] |)(\d{1,2})\.\d\d /m.exec(text);
    return ver;
}

// Пытается распаковать файл в каталог %temp%
// Возвращает массив со списком имен распакованных файлов
function Unpack(filepath) {
    var log = FSO.BuildPath(INI.temp, FSO.GetTempName());
    if (!/\.\d{6}$/i.test(filepath)) {
        GetFileFromPKCS7(filepath);
    }
    var cmd = INI.unpacker_cmd + ' "{0}") > "{1}" 2<&1'.format(filepath, log);
    var err = WshShell.Run(cmd, 0, true);
    if (err !== 0) {
        return [];
    }
    var text = '';
    if (FSO.FileExists(log)) {
        var file= FSO.OpenTextFile(log, 1);
        text = file.ReadAll();
        file.Close();
        FSO.DeleteFile(log, true);
    }
    var re = /^Extracting  (.+)$/gm;
    switch (INI.unpacker_ver) {
        case '4':
            text = Recode(text, 'cp866', 'windows-1251');
            break;
        case '9':
            break;
        default: //15+
            re = /^- (.+)$/gm;
    }
    var files_list = [], files_cnt = 0;
    while (re.exec(text)) {
        var filename = RegExp.lastParen.replace('\r', '');
        if (!/\.xml\.(ka|sig|sign)$/i.test(filename)) {
            files_list[files_cnt++] = filename;
        }
    }
    return files_list;
}

// Пытается расшифровать файл в каталог %temp%
// Возвращает расшифрованный текст
function DecryptSignatura(filepath) {
    var text = ReadFile(filepath);
    if (/^0/.test(text)) {
        text = GetTextFromPKCS7(text);
        if (text) {
            return text;
        }
        if (FSO.FileExists("C:\\Program Files\\MDPREI\\spki\\spki1utl.exe")) {
            var log = FSO.BuildPath(INI.temp, FSO.GetTempName());
            var filename = FSO.GetFileName(filepath);
            var profile = '07-FOIV';
            var cmd = '"C:\\Program Files\\MDPREI\\spki\\spki1utl.exe" -profile {0} -decrypt -in "{1}" -out "{1}.gz" -silent "{2}"'.format(profile, filepath, log);
            var err = WshShell.Run(cmd, 0, true);
            if (FSO.FileExists(log)) {
                var file= FSO.OpenTextFile(log, 1);
                text = file.ReadAll();
                file.Close();
                FSO.DeleteFile(log, true);
            }
            if (err !== 0) {
                return 'ошибка расшифровывания';
            }
            if (FSO.FileExists(filepath + '.gz')) {
                cmd = '"C:\\Program Files\\7-Zip\\7z.exe" e -y -tgzip -o{0} "{1}.gz"'.format(INI.temp, filepath);
                err = WshShell.Run(cmd, 0, true);
                if (err !== 0) {
                    return 'ошибка распаковки gzip';
                }
                log = FSO.BuildPath(INI.temp, filename);
                if (FSO.FileExists(log)) {
                    var file= FSO.OpenTextFile(log, 1);
                    text = file.ReadAll();
                    file.Close();
                    FSO.DeleteFile(log, true);
                    return text;
                }
            }
        } else {
            return 'содержимое зашифровано';
        }
    }
    return text;
}

// Определяет является ли файл архивом
function IsArchive(filepath) {
    var filename = FSO.GetFileName(filepath);
    if (/\.(txt|xml|vrb|inf|pdf|doc|docx|xls|xlsx|T\d\d)(\.\d{6})?$/i.test(filename)) {
        return false;
    }
    if (/\.(zip|arj|cab)$/i.test(filename)) {
        return true;
    }
    if (!/^(MSCF|PK|`к|0)/.test(ReadText(filepath, 4))) {
        return false;
    }
    // Возможно что архивом будет признан не-архив. Это - не страшно
    // т.к. ф-ция UnpackArchive() все равно вернет нулевой files_list
    // будет лишь потрачено лишнее время на попытку распаковки
    return true;
}

// Преобразовывает заданную дату в объект со свойствами: year, month, day, hours, min, sec
function Date2Obj(date) {
    function format(x) {
        return (x < 10) ?
            '0' + x : String(x);
    }
    return {
        year:  String(date.getFullYear()),  // yyyy
        month: format(date.getMonth() + 1), // mm
        day:   format(date.getDate()),      // dd
        hour:  format(date.getHours()),     // hh
        minu:  format(date.getMinutes())    // mm
//      sec:   format(date.getSeconds())    // ss not used
    };
}

// Преобразовывает заданную дату в строку для логирования ('dd.mm.yyyy hh:mm')
function Date2Log(date) {
    var dt = Date2Obj(date);
    return [dt.day, dt.month, dt.year].join('.') + ' ' + 
        [dt.hour, dt.minu].join(':');
}

// Преобразовывает заданную дату в строку для календаря ('dd.mm.yyyy')
function Date2Cal(date) {
    var dt = Date2Obj(date);
    return [dt.day, dt.month, dt.year].join('.');
}

// Преобразовывает заданную дату в строку для пути ('yyyy\mm\dd\')
function Date2Path(date) {
    var dt = Date2Obj(date);
    return [dt.year, dt.month, dt.day, ''].join('\\');
}

// Создание ярлыка на Рабочем столе
function CreateShortcut(shiftKey) {
    if (shiftKey) {
        SystemInfo();
        return;
    }
    var lnk = FSO.BuildPath(WshShell.SpecialFolders('Desktop'),
        'ПТК ПСД - Обозреватель отчетности.lnk');
    if (FSO.FileExists(lnk)) {
        switch (INI.argc) {
            case 2: //hta elo.ini browser.ini
                if (!YesNoBox(['Вы используете ярлык с настройками на:',
                    INI.elo,
                    INI.ini, '',
                    'Вы действительно хотите сбросить их?'].join('\n'))) {
                    return;
                }
                break;
            case 1: //hta elo.ini
                if (!YesNoBox(['Вы используете ярлык с настройкой на',
                    INI.elo,
                    'и {0} по умолчанию'.format(INI.ini), '',
                    'Вы действительно хотите сбросить ее?'].join('\n'))) {
                    return;
                }
                break;
            case 0: //hta only
                if (!YesNoBox(['Вы используете ярлык со стандартными настройками',
                    'Вы действительно хотите создать его заново?'].join('\n'))) {
                    return;
                }
                break;
            default:
                if (!YesNoBox(['Вы используете ярлык с нестандартными настройками',
                    'Вы действительно хотите сбросить их?'].join('\n'))) {
                    return;
                }
        }
        FSO.DeleteFile(lnk, true);
    }

    var sct = WshShell.CreateShortcut(lnk);
    sct.TargetPath = unescape(document.URL).replace(/^file:\/\/(.+)$/, '$1');
    sct.IconLocation = FSO.BuildPath(INI.path, 'icon.ico');
    sct.Description = 'Обозреватель отчетности ПТК ПСД';
    sct.Save();
    MsgBox(['Ярлык для запуска программы',
        'установлен на Вашем Рабочем столе!', '',
        'По умолчанию настройки на:',
        '%WINDIR%\\elo.ini', INI.ini, '',
        'Вы можете указать другие в свойствах ярлыка.'].join('\n'));
}

// Чтение ini файла в объект INI со свойствами идентичными именам ключей
function ReadINIFile(ini) {
    if (FSO.FileExists(ini) && FSO.GetFile(ini).Size > 0) {
        var file = FSO.OpenTextFile(ini, 1);
        var text = file.ReadAll();
        file.Close();
        if (/Р[^Р]Р[^Р]Р[^Р]/.test(text)) { // autodetect encoding
            text = Recode(text, 'utf-8', 'windows-1251');
        }
        var arr_lines = text.match(/[^\r\n]+/g); // split
        if (arr_lines) { // not empty
            var section, param, value;
            for (var i = 0, line, l = arr_lines.length; i < l; i++) {
                line = arr_lines[i].replace(/^\s*/, '').replace(/\s*$/, ''); // trim
                if (!/^[;#]/.test(line)) { // comment
                    if (/^\[(.+)\]/.test(line)) { // section
                        section = RegExp.$1;
                        if (section && !INI[section]) {
                            INI[section] = {};
                        }
                    } else if (/^(.+?)\s*=\s*(.+)/.test(line)) { // param=value
                        param = RegExp.$1;
                        value = RegExp.$2;
                        INI[section][param] = value;
                    }
                }
            }
        }
    }
}

// Возвращает полный путь к выбранному файлу отчетности
function GetFilePathById(id) {
    var RowOfDBTable = arrDB[id];
    var path = Date2Path(new Date(RowOfDBTable.dt));
    return FSO.BuildPath(INI.Path.ARCHIVESTORE, path + RowOfDBTable.filename);
}

// Шифрование пароля
function PassEncrypt(str) {
    var s = [], n = 0;
    for (var i = 0, l = str.length; i < l; i++) {
        s[n++] = ('000' + (6 ^ str.charCodeAt(i))).replace(/.*(.{4})$/, '$1');
    }
    return s.join('');
}

// Дешифрование пароля
function PassDecrypt(str) {
    var s = [], n = 0;
    for (var i = 0, l = str.length; i < l; i += 4) {
        s[n++] = String.fromCharCode(6 ^ Number(str.slice(i, i + 4)));
    }
    return s.join('');
}

// Сохранение, восстановление, удаление настроек из cookie
function Cookie(name, value) {
    function SetExpires(t) {
        var cookie_date = new Date();
        cookie_date.setTime(cookie_date.getTime() + t);
        return cookie_date.toGMTString();
    }

    if (value === undefined) {
        // Get Cookie
        if ((new RegExp('(?:^|; )' + name + '=([^;]*)')).test(document.cookie)) {
            return unescape(RegExp.$1);
        }
    } else if (value === null) {
        // Delete Cookie
        document.cookie = name += '=; expires=' + SetExpires(-1);
    } else {
        // Set Cookie
        document.cookie = name + '=' + escape(value) + '; expires=' + 
            SetExpires(1000 * 60 * 60 * 24 * 365);
    }
}

//=====================================================
//  ОБРАБОТКА ПЕРЕМЕЩЕНИЯ МЫШИ И НАЖАТИЙ НА КЛАВИАТУРУ
//=====================================================

// Разворачивание нижнего фрейма (файл для просмотра выбран в верхнем фрейме)
function OpenPreview() {
    var min_height = 40;
    if (/(\d+)px,\s*\*\s*,(\d+)px/.test(top.document.getElementById('frameset').rows)) {
        if (parseInt(RegExp.$2) <= min_height) {
            top.document.getElementById('frameset').rows = '{0}px,*,{1}px'.format(RegExp.$1, 265);
        }
    }
}

// Сворачивание нижнего фрейма (при старте и смене даты/периода)
function HidePreview() {
    var min_height = 40;
    if (/(\d+)px,\s*\*\s*,(\d+)px/.test(top.document.getElementById('frameset').rows)) {
        if (parseInt(RegExp.$2) > min_height) {
            top.document.getElementById('frameset').rows = '{0}px,*,{1}px'.format(RegExp.$1, min_height);
        }
    }
}

// Показ содержимого рейса в нижнем фрейме
function ShowPreview(id) {
    OpenPreview();
    var post_content = GetCachedContent(arrDB[id]);
    var Row = PostList.idRow[id].cells;
    if (!Row[2].innerHTML) {
        var color = post_content.state;
        Row[0].style.color = color;
        Row[1].style.color = color;
        Row[2].innerHTML = post_content.info;
    }
    var text = post_content.preview;
    var tt = '<tt>$1</tt>';
    text = text
        .replace(/([0-3]\d[.-\/][0-1]\d[.-\/]20[1-2]\d)/g, tt) // подсветка дат вида 19.03.2010 и 19-03-2010 (и 19/03/2010 по 550-П)
        .replace(/([0-3]\d[0-1]\d20[1-2]\d)/g, tt)   // подсветка дат вида 19032010
        .replace(/(20[1-2]\d[01]\d[0-3]\d)/g, tt)    // подсветка дат вида 20100319
        .replace(/(20[1-2]\d-[01]\d-[0-3]\d)/g, tt); // подсветка дат вида 2010-03-19 (XML)
    Preview.document.body.innerHTML = text;
    // добавляем возможность копировать имена файлов по клику на заголовке
    if (Preview.N) { // <P id=N>fname</P>
        var frame;
        for (var i = 0, l = Preview.N.length; i < l; i++) {
            frame = Preview.N[i];
            frame.title = 'Щелкните для копирования в буфер обмена';
            frame.onclick = function() {
                clipboardData.setData('Text', this.innerText.replace(/\.\w+?$/, ''));
            };
        }
    }
    if (find_text) {
        var TextRange = Preview.document.body.createTextRange();
        TextRange.findText(find_text);
        TextRange.select();
    } else {
        Preview.scrollTo(0, 0);
    }
}

// Выделение строки по которой кликнули мышью (или сдвинули выделение курсорными клавишами)
function SelectRow(id) {
    if (id === id_selected) {
        return;
    }
    if (id_selected !== undefined) {
        PostList.idRow[id_selected].style.backgroundColor = '';
    }
    id_selected = id;
    PostList.idRow[id].style.backgroundColor = 'inactivecaption';
    filePathNameTime_selected = GetFilePathById(id);
    ShowPreview(id);
}

// Обработка нажатий на клавиши вверх/вниз в списке посылок
function OnKeydownFromPostList() {
    var id = id_selected;
    var id_max = PostList.idRow.length - 1;
    var key = PostList.event.keyCode;
    switch (key) {
        case 33: // PgUp
            if (id > 11) {
                SelectRow(id - 10);
            } else {
                SelectRow(1);
            }
            break;
        case 34: // PdDn
            if (id < id_max - 10) {
                SelectRow(id + 10);
            } else {
                SelectRow(id_max);
            }
            break;
        case 35: // End
            SelectRow(id_max);
            break;
        case 36: // Home
            SelectRow(1);
            break;
        case 38: // вверх
            if (id > 1) {
                SelectRow(id - 1);
            }
            break;
        case 40: // вниз
            if (id < id_max) {
                SelectRow(id + 1);
            }
            break;
    }
}

//=====================================================
//  КОНТЕКСТНОЕ МЕНЮ
//=====================================================

// Показывает контекстное меню по правой кнопке мыши
function ShowContextMenu(pane) {
    // вставляем html-содержимое меню
    var html = [];
    html.push(
        '<table width=100% cellpadding=4 cellspacing=0>',
        '<style>td.icon {font:12pt Wingdings;}</style>'
    );
    switch (pane.name) {
        case 'Toolbar':
            var i = 0;
            for (var param in INI.Tools) {
                html.push(
                    '<tr id="menuitem" onClick="parent.Tools(', i++, ');">',
                    '<td>', param
                );
            }
            break;

        case 'PostList':
            html.push(
                '<tr id="menuitem" onClick="parent.PrintForm();">',
                '<td class="icon" style="font:12pt Wingdings 2;">&#x36;<td>Печать',
                '<tr id="menuitem" onClick="parent.OpenExplorer();">',
                '<td class="icon" style="font:10pt;">&#x31;<td>Открыть каталог',
                '<tr id="menuitem" onClick="parent.SaveRace(parent.filePathNameTime_selected);">',
                '<td class="icon">&#x3C;<td>Сохранить посылку в...',
                '<tr id="menuitem" onClick="parent.SaveRace();">',
                '<td class="icon">&#x34;<td>Распаковать все файлы в...',
                '<tr id="menuitem" onClick="parent.ReReadRace();">',
                '<td class="icon">&#x5B;<td>Перечитать содержимое посылки'
            );
            break;

        case 'Preview':
            html.push(
                '<tr id="menuitem" onClick="parent.PrintForm();">',
                '<td class="icon" style="font:12pt Wingdings 2;">&#x36;<td>Печать',
                '<tr id="menuitem" onClick="parent.SaveRace(parent.filePathNameTime_selected);">',
                '<td class="icon">&#x3C;<td>Сохранить всю посылку в...'
            );

            if (file_clicked_in_preview) {
                html.push(
                    '<tr id="menuitem" onClick="parent.SaveRace(\'', file_clicked_in_preview, '\');">',
                    '<td class="icon">&#x3D;<td>Сохранить файл под курсором в...',
                    '<tr id="menuitem" onClick="parent.SaveRace();">',
                    '<td class="icon">&#x34;<td>Распаковать все файлы в...',
                    '<tr id="menuitem" onClick="parent.FindRelatedDocs(\'', file_clicked_in_preview, '\');">',
                    '<td class="icon">&#x61;<td>Найти связанные документы'
                );
            }
            break;

        default:
            return;
    }
    html.push('</table>');
    var body = ContextMenu.document.body;
    body.innerHTML = html.join('');

    // добавляем эвенты для подсветки текущего пункта меню
    var all = ContextMenu.document.all;
    if (!all.menuitem) { // no items
        return;
    }
    for (var i = 0, l = all.menuitem.length; i < l; i++) {
        all.menuitem[i].onmouseover = function () {
            this.style.background = 'activecaption';
            this.style.color = 'highlighttext';
        };
        all.menuitem[i].onmouseout = function () {
            this.style.background = 'buttonface';
            this.style.color = 'buttontext';
        };
    }

    // вычисляем размер меню
    ContextMenu.show(0, 0, 0, 0, document.body);
    var width  = body.scrollWidth  + 4;
    var height = body.scrollHeight + 5;
    ContextMenu.hide();

    // показываем меню
    var e = pane.event;
    ContextMenu.show(e.clientX, e.clientY, width, height, pane.window.document.body);
}

// Клик ПКМ в панели тулбара
function ToolbarMouseRightClick(event_srcElement) {
    ShowContextMenu(Toolbar);
}

// Клик ПКМ в панели предпросмотра
function PreviewMouseRightClick(event_srcElement) {
    // Находим имя файла, отображаемого в панели предпросмотра, на котором кликнули ПКМ
    function GetFileOnClicked(obj) {
        if (!obj) { // white space
            return '';
        } else if (obj.tagName === 'DIV') {
            var th = obj.getElementsByTagName('P')[0];
            return th ? th.innerText : '';
        } else {
            return GetFileOnClicked(obj.parentNode);
        }
    }

    var selected = Preview.document.selection.createRange().text;
    if (selected) { // если имеется выделенный текст
        clipboardData.setData('Text', selected);
        Popup('Скопировано в буфер обмена');
    } else { // запуск контекстного меню
        file_clicked_in_preview = GetFileOnClicked(event_srcElement);
        ShowContextMenu(Preview);
    }
}

// Выполнение выбранного средства
function Tools(n) {
    var i = 0;
    for (var param in INI.Tools) {
        if (i++ === n) {
            var value = INI.Tools[param];
            var v = value.split(',');
            switch (v[0]) {
                case 'explore':
                    filePathNameTime_selected = v[1];
                    OpenExplorer();
                    return;
                case 'flag':
                    SaveFile(v[1], 'go!');
                    MsgBox(['[Tools]', param, '', v[1], 'Флаг записан.'].join('\n'));
                    return;
                default:
                    ErrBox(['[Tools]', param, '', 'Непонятная команда:', value].join('\n'));
                    return;
            }
        }
    }
}

// Печать выбранного отчета
function PrintForm() {
    Preview.window.focus();
    Preview.window.print();
}

// Открывает окно Проводника и выделяет файл отчетности
function OpenExplorer() {
    WshShell.Run('explorer /e, /select, ' + filePathNameTime_selected);
}

// Сохранение файла отчетности (как есть целиком, одно из вложений, или все вложения)
function SaveRace(save_filename) {
    // Удаление ЭП у сохраняемого файла
    function DeleteSignature(filepath) {
        var content = ReadFile(filepath);
        if (/o000000(?:.|\n){64}(\d{4}[0-9A-Z]{6}\d{2})(?:.|\n){15}$/.test(content)) {
            SaveFile(filepath, RegExp.leftContext);
        }
    }
    // Извлекает из архива arc_filepath в каталог dest_path файл dest_filename (или все, если dest_filename==undefined)
    function ExtractFromArchive(arc_filepath, dest_path, dest_filename) {
        var arc_filename = FSO.GetFileName(arc_filepath);
        if (arc_filename === dest_filename || // единственный файл
            dest_filename === undefined && !/\.(inf|tmp|arj|zip|\d{6})$/i.test(arc_filename)) { // все файлы
            FSO.CopyFile(arc_filepath, dest_path + '\\', true);
            if (INI.BrowserSettings.sign_delete_onsave === '1') {
                DeleteSignature(FSO.BuildPath(dest_path, arc_filename));
            }
        } else {
            var arc_files_list = [];
            if (IsArchive(arc_filepath)) {
                arc_files_list = Unpack(arc_filepath);
            }
            var temp = INI.temp;
            for (var i = 0, l = arc_files_list.length; i < l; i++) {
                ExtractFromArchive(FSO.BuildPath(temp, arc_files_list[i]), dest_path, dest_filename);
            }
        }
    }
    // ----------------------------------------------------------------------------
    var msg_text = 'Выберите папку для сохранения распакованных файлов';
    if (save_filename) {
        save_filename = FSO.GetFileName(save_filename);
        msg_text = ['Выберите папку для сохранения файла', save_filename].join('\n');
    }
    var save_dir = INI.BrowserSettings['save_' + arrDB[id_selected].posttype] || INI.BrowserSettings.save_default;
    var objFolder = (new ActiveXObject('Shell.Application')).BrowseForFolder(0, msg_text, 0, save_dir);
    if (!objFolder) {
        return;
    }
    var dest_path = objFolder.Self.Path + '\\';

    if (save_filename === FSO.GetFileName(filePathNameTime_selected)) {
        // Сохранение нераспакованного файла отчетности как есть целиком
        FSO.CopyFile (filePathNameTime_selected, dest_path, true);
    } else {
        // Сохранение всех или одного из вложенных файлов
        ExtractFromArchive(filePathNameTime_selected, dest_path, save_filename);
        var tmp = FSO.BuildPath(INI.temp, '*.*');
        if (FSO.FileExists(tmp)) {
            FSO.DeleteFile(tmp, true);
        }
    }
}

// Поиск в кеше документов, в которых встречается упоминание о текущем файле
function FindRelatedDocs(filename) {
    filename = filename.replace(/^KWTFCB_/i, '').replace(/^(IZVTUB|BNP\d|BOS\d|BV\d{3}|BVD\d|BVS\d|PB\d|)_/i, '')
        .replace(/^S[FB][CPFREKT]?/i, '').replace(/\.\w{3}$/, '');
    var arrFind = [], arrFind_cnt = 0;
    var preview_text;
    for (var fname in Cache) {
        if (Cache.hasOwnProperty(fname)) {
            preview_text = Cache[fname].preview;
            if (preview_text && preview_text.replace(/<.*?>/g, '').indexOf(filename) > -1) {
                arrFind[arrFind_cnt++] = fname;
            }
        }
    }
    if (arrFind_cnt > 1) {
        var sql_string = "SELECT * FROM elo_arh_post WHERE filename IN ('{0}') ORDER BY posttype, dt, filetype"
            .format(arrFind.join("','"));
        arrDB = [];
        arrDB = QueryDatabase(sql_string);
        CreatePostList();
        ContextMenu.hide();
        find_text = filename;
    } else {
        MsgBox(['Документов с упоминанием файла',
            filename,
            'в кеше не найдено!', '',
            'Попробуйте поискать их вручную.'].join('\n'),
            'Поиск связанных документов');
    }
}

function ReReadRace() {
    var id = id_selected;
    var Row = PostList.idRow[id].cells;
    var post_content = GetCachedContent(arrDB[id], true); // извлекаем данные принудительно
    var color = post_content.state;
    Row[0].style.color = color;
    Row[1].style.color = color;
    Row[2].innerHTML = post_content.info;
    ShowPreview(id);
    ContextMenu.hide();
    setTimeout(SaveCache, 0);
}

//=====================================================
//  ЗАПОЛНЯЕМ ЭЛЕМЕНТАМИ ОКНО ПРИЛОЖЕНИЯ
//=====================================================

// Извлечение значений системных цветов в строку для задания градиента (строка готового стиля)
function GetGradientColors(tb) {
    tb.body.style.color = 'threedface';
    INI.gradient = 'zoom:1; filter:progid:DXImageTransform.Microsoft.Gradient(' +
        'StartColorStr={0}, EndColorStr={1});'.format(tb.fgColor, tb.bgColor);
    tb.body.style.color = '';
}

// Создание стандартных для этого приложения заголовков окон
function AddHeaders(document, css) {
    var head = document.documentElement.firstChild;
    var meta = document.createElement('META');
    meta.httpEquiv = 'Content-Type';
    meta.content = 'text/html; charset=utf-8';
    head.appendChild(meta);

    meta = document.createElement('META');
    meta.httpEquiv = 'X-UA-Compatible';
    meta.content = 'IE=edge';
    head.appendChild(meta);

    meta = document.createElement('META');
    meta.httpEquiv = 'MSThemeCompatible';
    meta.content = 'yes';
    head.appendChild(meta);

    // Добавление стилей CSS одним разом, чтобы не дергать браузер на перерисовку
    var style;
    if (document.createStyleSheet) {
        try {
            (style = document.createStyleSheet()).cssText += css;
            return;
        } catch(s) {};
    }
    (style = document.createElement('STYLE')).type = 'text/css';
    style.appendChild(document.createTextNode(css));
    head.appendChild(style);
}

// Подготовка фрейма Toolbar (панель инструментов)
function load_Toolbar() {
    var tb = Toolbar.document;
    GetGradientColors(tb);
    AddHeaders(tb, [
        'body {margin:0; background-color:threedface; font:normal 10pt Verdana;}',
        'div {padding:2px 5px;}',
        'span {white-space: nowrap; color:activecaption;}',
        'a {text-decoration:none;}',
        'a:visited {color:activecaption;}',
        'a:hover {color:red;}',
        'select {width:auto;}',
        '#refresh {font:14pt Wingdings;}',
        '#link {float:right; font:14pt Wingdings; padding-right:10px;}',
        '#idDateInput {width:6em; text-align:center;}',
        '#idCalendarButton {vertical-align:top; font:12pt Webdings;}'
    ].join(''));
    
    tb.body.innerHTML = [
        '<div id=idToolbar>',
        '<div id=link><a href="#" hidefocus ',
        'title="Создать на Рабочем столе\nярлык для запуска программы\n(с Shift - показать сис.инфо)" ',
        'onClick="parent.CreateShortcut(event.shiftKey); return false;"> &#x4F; </a></div> ',
        '<input type="checkbox" id=idByPostType title="Сортировать формы\nпо коду | по названию" ',
        'onClick="parent.CreateFormList();">К</input> ',
        '<input type="checkbox" id=idByInterval checked title="Фильтр форм\nза период | все" ',
        'onClick="parent.CreateFormList();">Ф</input> ',
        '<select name=idPostType onChange="parent.CreateFormList();"><option value="*">Все Формы</option></select> ',
        '<span id=refresh><a href="#" hidefocus title="Обновить список\n(с Shift - перезагрузить)" ',
        'onClick="parent.StartCreatePostList(event.shiftKey); return false;">&#x5B;</a></span> ',
        '<input type="button" id=idIntervalButton value="сегодня" title="За ', GetDate(0), '" hidefocus ',
        'onClick="parent.SetInterval(0);">',
        '<input type="button" id=idIntervalButton value="вчера" title="За ', GetDate(-1), '" hidefocus ',
        'onClick="parent.SetInterval(1);">',
        '<input type="button" id=idIntervalButton value="за 4 дня" title="С ', GetDate(-3), '" hidefocus ',
        'onClick="parent.SetInterval(2);">',
        '<input type="button" id=idIntervalButton value="за неделю" title="С понедельника" hidefocus ',
        'onClick="parent.SetInterval(3);">',
        '<span>',
        '<input type="button" id=idIntervalButton value="за:" title="Диапазон\nза день | за период" hidefocus ',
        'onClick="parent.IntervalButtonSet(4); parent.FixedOrPeriod(this.value !== \'за:\');">',
        '<input hidefocus id=idDateInput type=text maxlength="10" onkeydown="parent.EnterDate(0);" ',
        'onfocus="parent.IntervalButtonSet(4);">',
        '<a href="#" id=idCalendarButton style="display:none" ',
        'onClick="parent.IntervalButtonSet(4); parent.ShowCalendarDialog(0); return false;" hidefocus>&#xA6;<\/a> ',
        '<span id=idEndDateHide style="display:none"> по:',
        '<input hidefocus id=idDateInput type=text maxlength="10" onkeydown="parent.EnterDate(1);" ',
        'onfocus="parent.IntervalButtonSet(4);">',
        '<a href="#" id=idCalendarButton style="display:none" ',
        'onClick="parent.IntervalButtonSet(4); parent.ShowCalendarDialog(1); return false;" hidefocus>&#xA6;<\/a>',
        '</span></span>',
        '<object id=idAxCalendar classid="clsid:18cc8d5c-214f-11d6-9dad-897f1e7b434a" style="display:none;"></object>',
        '</div>'
    ].join('');

    tb.onmouseup = function() {
        if (Toolbar.event.button === 2) {
            ToolbarMouseRightClick(Toolbar.event.srcElement);
        }
    };
}

// Подготовка контекстного меню
function load_RCMenu() {
    ContextMenu = window.createPopup();
    var menu = ContextMenu.document;
    AddHeaders(menu, [
        'body {background-color:buttonface; cursor:default;}',
        'table {background-color:buttonface; font:menu; margin:0px; width:100%;}',
        'td {white-space:nowrap; width:100%;}'
    ].join(''));
    menu.body.style.border = '2px outset';
    menu.oncontextmenu = function() {
        return false;
    };
}

// Подготовка фрейма PostList (список сообщений)
function load_PostList() {
    var postlist = PostList.document;
    AddHeaders(postlist, [
        'table {font: normal 10pt Verdana; width:100%; border-collapse:collapse; cursor:hand;}',
        'th {color:threeddarkshadow; cursor:default;', INI.gradient, '}',
        'td {border-bottom:1px solid threedface; padding:0 2px 0 2px; white-space:nowrap;}',
        's {text-decoration:none; font: normal 8pt MS Sans Serif; color:threeddarkshadow;}',
        'tt {font: normal 8pt MS Sans Serif; color:#990000;}',
        'td.icon {width:14pt; font-family:Wingdings; font-size:12pt;}'
    ].join(''));

    postlist.onkeydown = function() {
        parent.OnKeydownFromPostList();
    };
}

// Подготовка фрейма Preview (просмотр содержимого сообщения)
function load_Preview() {
    HidePreview();
    var preview = Preview.document;
    AddHeaders(preview, [
        'q {color:blue; font-weight:bold;}',
        'tt {color:blue;}',
        'i {color:red; font-weight:bold; font-style:normal;}',
        'u {color:threeddarkshadow; text-decoration:none;}',
        'table {width:100%; border-collapse:collapse;}',
        'div {margin:0; padding:0 3px 3px 8px; border: 1px solid buttonshadow; font:normal 10pt Courier New;}',
        'p#N {margin:0 -3px 0 -8px; padding:0 3px 1em 8px; text-align:center; color:threeddarkshadow;', INI.gradient, '}',
        'input {font: bold 8pt MS Sans Serif; display: inline;}',
        's {text-align:right; text-decoration:none; font: normal 8pt MS Sans Serif; color:green; /*background-color:infobackground;*/ display:block;}',
        'span {font: normal 8pt MS Sans Serif;}',
        '#idProgress {margin:0; padding:1px; border:0; height:100%; background-color:green; text-align:center; line-height:100%; color:white;}'
    ].join(''));

    preview.onmouseup = function() {
        if (Preview.event.button === 2) {
            PreviewMouseRightClick(Preview.event.srcElement);
        }
    };
}

// Загружает в раскрывающийся список <SELECT> имена обрабатываемых форм
function CreateFormList() {
    // Извлекает список форм, разрешенных текущему пользователю
    function GetForms(by_order) {
        var usrname = INI.User.CurUser;
        var status = Preview.document.body;
        status.innerHTML = 'Загрузка пользователя...';
        var userid = QueryDatabase('SELECT usrid FROM elo_users WHERE usrname = ?', usrname)[0].usrid;
        status.innerHTML = 'Загрузка прав пользователя...';
        var allowed_forms_arr = QueryDatabase('SELECT DISTINCT SP.POSTTYPE ' +
            'FROM ELO_USERS_ACCESS UA LEFT JOIN ELO_SPR_POST_SUB SP ON UA.FORMNAME = SP.CODE ' +
            'WHERE UA.USERID = ?', userid);
        var tmp = [];
        for (var i = 0, l = allowed_forms_arr.length; i < l; i++) {
            tmp[i] = allowed_forms_arr[i].posttype;
        }
        var allowed_forms = "'{0}'".format(tmp.join("','"));
        status.innerHTML = 'Загрузка форм пользователя...';
        var posttype_name_list = QueryDatabase('SELECT posttype, postname FROM elo_spr_post ' +
            'WHERE posttype IN ({0}) ORDER BY {1}'.format(allowed_forms, by_order));
        INI.allowed_forms = allowed_forms; // сохраним в глобальной переменной (еще понадобится)
        return posttype_name_list;
    }

    if (!INI.DataBase.db_connect_string) {
        return;
    }
    // Заполняем комбобокс
    var by_posttype = Toolbar.idByPostType.checked;
    var forms = GetForms(by_posttype ? 'posttype' : 'postname');
    var pt = Toolbar.idPostType;
    var old_value = pt.value;
    var tb = Toolbar.document;
    pt.innerHTML = '';
    var post_type;
    var post_name = 'Все формы';
    var post_title = '*: ' + post_name;
    var option = tb.createElement('option');
    option.value = '*';
    option.text = post_name;
    option.title = post_title;
    pt.add(option);

    for (var i = 0, l = forms.length; i < l; i++) {
        post_type = forms[i].posttype;
        post_name = forms[i].postname.replace(/ПТК ПСД\.\s+/, '').replace(/\.$/, '');
        post_title = post_type + ': ' + post_name;
        option = tb.createElement('option');
        option.value = post_type;
        option.selected = post_type === old_value;
        option.text = by_posttype ? post_title : post_name;
        option.title = post_title;
        pt.add(option);
    }
    StartCreatePostList(); // Принудительно перерисовать фрейм с новыми параметрами
}

function UpdateFormsList(available_forms) {
    var tb = Toolbar.idPostType;
    var by_interval = Toolbar.idByInterval.checked;
    var options_length = tb.options.length;
    var i, l = options_length;
    if (by_interval) {
        var value, found, j, f = available_forms.length;
        for (i = 1; i < l; i++) {
            value = tb.options[i].value;
            found = false;
            for (j = 0; j < f; j++) {
                if (value === available_forms[j].posttype) {
                    found = true;
                    break;
                }
            }
            tb.options[i].disabled = !found;
        }
    } else {
        for (i = 1; i < l; i++) {
            tb.options[i].disabled = false;
        }
    }
}

// Переключатель отображения ручного задания периода дат (за фиксированную дату - за период)
function FixedOrPeriod(fixed) {
    Toolbar.idIntervalButton[4].value   = fixed ? 'за:'  : 'с:';
    Toolbar.idEndDateHide.style.display = fixed ? 'none' : '';
}

// Подсветка кнопки с выбранным интервалом
function IntervalButtonSet(btn_selected) {
    for (var i = 0, l = Toolbar.idIntervalButton.length; i < l; i++) {
        Toolbar.idIntervalButton[i].style.color =
            (i === btn_selected) ? 'activecaption' : '';
    }
}

//=====================================================
//  ЗАДАНИЕ ИНТЕРВАЛОВ ДАТ ДЛЯ ВЫБОРКИ
//=====================================================

// Возвращает строку даты 'dd.mm.yyyy', отстоящую от заданной (если не задано, то от текущей) на days дней
function GetDate(days, startDate, noFormat) {
    var datetime = startDate ?
        new Date(startDate.replace(/(\d+)\D(\d+)\D(\d+)/, '$2-$1-$3')) : new Date();
    if (days !== 0) {
        datetime.setDate(datetime.getDate() + days);
    }
    return noFormat ? datetime : Date2Cal(datetime);
}

// Задает интервал дат для выборки
function SetInterval(i) {
    IntervalButtonSet(i);
    switch (i) { // Переключатель интервалов
        case 0: // сегодня
            FixedOrPeriod(true);
            Toolbar.idDateInput[0].value = GetDate(0);
            Toolbar.idDateInput[1].value = GetDate(0);
            break;
        case 1: // вчера
            FixedOrPeriod(true);
            Toolbar.idDateInput[0].value = GetDate(-1);
            Toolbar.idDateInput[1].value = GetDate(-1);
            break;
        case 2: // за 4 дня
            FixedOrPeriod(false);
            Toolbar.idDateInput[0].value = GetDate(-3);
            Toolbar.idDateInput[1].value = GetDate(0);
            break;
        case 3: // за неделю с понедельника
            FixedOrPeriod(false);
            var day = (new Date()).getDay();
            day = (day === 0) ? 6 : day - 1;
            Toolbar.idDateInput[0].value = GetDate(-day);
            Toolbar.idDateInput[1].value = GetDate(0);
            break;
    }
    StartCreatePostList();
}

// Проверка правильности задания даты в InputBox (и, если возможно, корректировка)
function CorrectDate(InputBox) {
    function format(x) {
        return (x < 10) ?
            '0' + x : String(x);
    }
    InputBox.style.color = '';
    if (InputBox.disabled) {
        return true;
    }
    var arr = InputBox.value.match(/^(\d{1,2})\D(\d{1,2})\D(\d{2}|\d{4})$/);
    if (arr) {
        var dd = Number(arr[1]);
        var mm = Number(arr[2]);
        var yyyy = Number((arr[3].length === 2) ? '20' + arr[3] : arr[3]);
        var date = new Date(yyyy, mm - 1, dd);
        if (dd === date.getDate() &&
            mm === date.getMonth() + 1 && 
            yyyy === date.getFullYear()) {
            InputBox.value = [format(dd), format(mm), format(yyyy)].join('.');
            return true;
        }
    }
    InputBox.style.color = 'red';
    return false;
}

// Нажатие Enter или Tab в поле ручного ввода даты
function EnterDate(inputbox_idx) {
    var key = Toolbar.event.keyCode;
    if (key === 9 || key === 13) {
        if (CorrectDate(Toolbar.idDateInput[inputbox_idx])) {
            var next_idx = inputbox_idx === 0? 1 : 0;
            if (key === 13) { // Enter
                if (Toolbar.idEndDateHide.style.display === 'none') {
                    Toolbar.idDateInput[1].value = Toolbar.idDateInput[0].value;
                }
                if (CorrectDate(Toolbar.idDateInput[next_idx])) {
                    StartCreatePostList();
                }
            } else { // Tab
                Toolbar.idDateInput[next_idx].focus();
            }
        }
    }
}

//=====================================================
//  ActiveX КАЛЕНДАРЬ
//=====================================================
// Вставляет дату, выбранную в календаре, в InputBox
function ReturnDate(date, inputbox_idx) {
    var tb = Toolbar.idDateInput[inputbox_idx];
    tb.value = Date2Cal(new Date(date));
    tb.focus();
    // иммитируем нажатие Enter в поле ручного ввода даты
    var evnt = Toolbar.document.createEventObject();
    evnt.keyCode = 13;
    tb.fireEvent('onkeydown', evnt);
}

// Подготовка диалогового окна с календарем
function InitCalendar(DialogWin, inputbox_idx) {
    // Конвертация строки "285px" в число 285
    function px2number(size_px) {
        return Number(size_px.replace(/\D*/g, ''));
    }
    // Установка параметров объекта календарь
    var cal = DialogWin.idCalendar;
    var dw = DialogWin.dialogWidth;
    var dh = DialogWin.dialogHeight;
    cal.classid = Toolbar.idAxCalendar.classid;
    cal.Date    = Toolbar.idDateInput[inputbox_idx].value;
    cal.width   = dw;
    cal.height  = dh;
    // Корректировка размера диалогового окна (т.к. в старых версиях IE эти параметры задают размер диалогового окна целиком, а не размер клиентской области)
    var body = DialogWin.document.body;
    DialogWin.dialogWidth  = px2number(dw) + body.scrollWidth  - body.offsetWidth  + 'px';
    DialogWin.dialogHeight = px2number(dh) + body.scrollHeight - body.offsetHeight + 'px';
}

// Показывает диалоговое окно с календарем
function ShowCalendarDialog(inputbox_idx) {
    var html = [
        'javascript:"',
        '<head><title>Выбор даты</title></head>',
        "<body onload='window.dialogArguments.InitCalendar(self, 0)'>",
        '<object id=idCalendar></object>',
        "<script for=idCalendar event='OnDateChanged()'>",
        'window.dialogArguments.ReturnDate(idCalendar.Date,', inputbox_idx, ');',
        'self.close();<\/script></body>"'
    ].join('');

    var style = [
        'status:no; help:no; dialogWidth:200px; dialogHeight:200px;',
        'dialogLeft:', Toolbar.event.screenX, 'px;',
        'dialogTop:',  Toolbar.event.screenY, 'px;'
    ].join('');

    showModelessDialog(html, self, style);
}

// Инициализация (и установка при необходимости) AxCalendar
function CheckCalendarActiveX() {
    if (!Toolbar.idAxCalendar.object) {
        var home = INI.Path.HOME;
        if (!home) {
            return;
        }
        var ax_path = FSO.BuildPath(home, 'AxCalendar.ocx');
        if (!FSO.FileExists(ax_path)) {
            return;
        }
        var ret = WshShell.Run('regsvr32 /s "{0}"'.format(ax_path), 1, true);
        if (ret !== 0) {
            return;
        }
    }
    Toolbar.idCalendarButton[0].style.display = '';
    Toolbar.idCalendarButton[1].style.display = '';
}

//=====================================================
//  РАБОТА С КЕШЕМ ДАННЫХ
//=====================================================

// Кешированное получение содержимого файла
function GetCachedContent(RowOfDBTable, reload) {
    var filename = RowOfDBTable.filename;
    var cache = INI.cache; // файл кеша
    var post_content = Cache[filename]; // вначале пробуем получить из кеша
    if (!post_content) { // если данных по запрошенному файлу нет в объекте Cache
        if (cache && FSO.FileExists(cache) &&
            INI.cache_DateLastModified !== FSO.GetFile(cache).DateLastModified) {
            // если кеш на диске был кем то изменен
            LoadCache(); // грузим кеш по-новой
            post_content = Cache[filename]; // и вновь пробуем получить из кеша
        }
    }
    if (!post_content || reload) { // если данных по запрошенному файлу нет в объекте Cache
        post_content = GetObjPostContent(RowOfDBTable); // извлекаем данные самостоятельно
        Cache[filename] = post_content;
        INI.cache_contains_unique_data = true;
    }
    return post_content;
}

// Сохранение содержимого массива Cache на диске
function SaveCache() {
    var cache = INI.cache; // файл кеша
    if (!cache || !INI.cache_contains_unique_data) {
        return; // Сохраняем, только если наш объект содержит данные, отсутствующие в кеше на диске
    }
    var XMLDoc = new ActiveXObject('Msxml2.DOMDocument');
    XMLDoc.appendChild(XMLDoc.createProcessingInstruction("xml", "version='1.0' encoding='windows-1251'"));
    var rootNode = XMLDoc.appendChild(XMLDoc.createElement('cache'));
    rootNode.setAttribute('version', PtkBro.version);
    var file, post_content;
    for (var filename in Cache) {
        if (Cache.hasOwnProperty(filename)) {
            post_content = Cache[filename];
            file = rootNode.appendChild(XMLDoc.createElement('file'));
            file.setAttribute('name',  filename);
            file.setAttribute('state', post_content.state);
            if (post_content.info) {
                file
                    .appendChild(XMLDoc.createElement('info'))
                    .appendChild(XMLDoc.createCDATASection(post_content.info));
            }
            file
                .appendChild(XMLDoc.createElement('preview'))
                .appendChild(XMLDoc.createCDATASection(post_content.preview));
        }
    }
    try {
        XMLDoc.save(cache);
        INI.cache_contains_unique_data = false;
    } catch (e) {
        //TODO Повторить? Перезагрузить?
    }
}

// Загрузка кеша с диска в массив Cache
function LoadCache() {
    var cache = INI.cache; // файл кеша
    if (!cache || !FSO.FileExists(cache)) {
        return;
    }
    INI.cache_DateLastModified = FSO.GetFile(cache).DateLastModified;
    var XMLDoc = new ActiveXObject('Msxml2.DOMDocument');
    XMLDoc.async = false;
    try { // На случай, если кеш содержит результаты старой версии
        XMLDoc.load(cache);
        var root = XMLDoc.documentElement;
        var file, filename, filestate, tag_info;
        for (var i = 0, l = root.childNodes.length; i < l; i++) {
            file = root.childNodes[i];
            filename  = file.attributes.getNamedItem('name').nodeValue;
            filestate = file.attributes.getNamedItem('state').nodeValue;
            tag_info  = file.getElementsByTagName('info')[0];
            Cache[filename] = {
                state:   filestate,
                info:    tag_info ? tag_info.childNodes[0].nodeValue : '',
                preview: file.getElementsByTagName('preview')[0].childNodes[0].nodeValue
            };
        }
    } catch (e) {
        DeleteCache();
    }
}

// Удаление кеша с диска для его последующей принудительной перезагрузки
function DeleteCache() {
    var cache = INI.cache; // файл кеша
    if (!cache || !FSO.FileExists(cache)) {
        return;
    }
    FSO.DeleteFile(cache, true);
    Cache = {}; // объект, хранящий результаты обработки содержимого файлов
}

//=====================================================
//  ЧТЕНИЕ И ОБРАБОТКА СОДЕРЖИМОГО ПОСЫЛКИ
//=====================================================

// Возвращает все содержимое посылки (упакованной и нет) в виде объекта:
// obj.state содержит результат приема
// obj.info содержит пояснение
// obj.preview содержит нижний фрейм со всем содержимым
function GetObjPostContent(RowOfDBTable) {
    var filepath = FSO.BuildPath(INI.Path.ARCHIVESTORE, 
        Date2Path(new Date(RowOfDBTable.dt)) + RowOfDBTable.filename);
    var count_ok = 0;
    var count_bad = 0;

    // Извлечение информации о содержимом посылки из списка файлов
    function GetContentInfoFromFilesList(files_list, post_type) {
        // Извлечение имен форм отчетности содержащихся в SA посылке из списка файлов
        function GetSAForms(files_list) {
            // Возвращает имена форм, извлекая их из списка имён файлов
            function GetFormNames(files_list, re) {
                var form_names = [], form_cnt = 0;
                while (re.exec(files_list)) {
                    form_names[form_cnt++] = RegExp.$1;
                }
                return form_names.join(', ');
            }

            // В одной посылке м.б. только одна форма:
            var bank_code = INI.bank_code;
            if (/^ZDL\d+\.xls$/im.test(files_list)) {
                return 'Инф.о просроченной задолженности'; // Н.Новгород
            }
            if (/^[ep]nu\d{6}\.cry$/im.test(files_list)) {
                return 'Перечень ДФМиВК'; // Н.Новгород
            }
            if ((new RegExp('^MN\\d{3}' + bank_code + '\\.xls$', 'im')).test(files_list)) {
                return 'Сведения о работе с монетой БР'; // Н.Новгород
            }
            if ((new RegExp('^IA\\w{3}' + bank_code + '\\.', 'im')).test(files_list)) {
                return '601'; // С.Петербург
            }
            if ((new RegExp('^IN\\w{3}' + bank_code + '\\.', 'im')).test(files_list)) {
                return '652'; // С.Петербург
            }
            if ((new RegExp('^SK\\w{3}' + bank_code + '\\.', 'im')).test(files_list)) {
                return 'KAS'; // С.Петербург
            }

            // В одной посылке м.б. несколько различных форм:
            var formnames = GetFormNames(files_list, new RegExp('^F(\\w{3})' + bank_code + '[1-C]\\.', 'gim')); // С.Петербург (664, 665, KRK, PSV, VBK)
            if (formnames) {
                return formnames;
            }
            formnames = GetFormNames(files_list, new RegExp('^F' + bank_code + '(\\w{2,5})\\.(ZIP|DOC)$', 'gim')); // Н.Новгород (308P, 652, 601, 664, 665, KR, PS, VBK)
            return formnames;
        }
        // Преобразует символ из имени файла в читабельный тип посылки 311-П
        function Get311Type(char) {
            switch (char.toUpperCase()) {
                case 'A':
                    return 'сообщ. в ФНС <tt>1 типа</tt>';
                case 'O':
                    return 'квит. из ФНС <tt>1 типа</tt>';
                case 'B':
                    return 'сообщ. в ФНС <tt>2 типа</tt>';
                case 'N':
                    return 'квит. из ФНС <tt>2 типа</tt>';
                case 'C':
                    return 'сообщ. в ПФ';
                case 'P':
                    return 'квит. из ПФ';
                case 'D':
                    return 'сообщ. в ФСС';
                case 'S':
                    return 'квит. из ФСС';
                case 'Z':
                case 'Y':
                    return 'ФНС спр.';
            }
        }
        // -----------------------------------------------------------
        var info = [], info_cnt = 0;
        var count = 0;
        switch (post_type) {
            case 'sa':
                info[info_cnt++] = GetSAForms(files_list);
                break;
            case '2z': // 311П
                if (/^([ABCDOPSZYN])N?\d{13,15}\.ARJ$/im.test(files_list)) {
                    var adr = Get311Type(RegExp.$1);
                    count = files_list.match(/^(S\w\w\d{9}_\d{12}_\d{16,18}_\d{3}|ZA\w\d{8}_\d{12}_\d{6})\.(TXT|XML)$/igm);
                    if (count) {
                        var total = count.length;
                        var errors = files_list.match(/^S\w[EK]\d{9}_\d{12}_\d{16,18}_\d{3}\.XML$/igm);
                        if (errors) {
                            count_bad += errors;
                            total += ('/' + errors.length).fontcolor('red');
                        }
                        info[info_cnt++] = '{0} <s>({1})</s>'.format(adr, total);
                    }
                } else if (/^UV(\w).+\.XML$/im.test(files_list)) {
                    var uvtype = Get311Type(RegExp.$1);
                    info[info_cnt++] = '<s>уведом. ЦБ на {0}</s>'.format(uvtype);
                }
                break;
            case '5z': // 322П
            case 'mz': // 365П + 440П // ver. 23.05.2017
                // 2.1.1, 2.5.1 Решение о приостановлении операций/поручений
                var rpo = files_list.match(/^(RPO|APN)\w+\.(xml|vrb)$/igm);
                // 2.2.1, 2.6.1 Решение об отмене приостановления операций/поручений
                var roo = files_list.match(/^(ROO|APO)\w+\.(xml|vrb)$/igm);
                // 2.3.1, 2.3.4, 2.4.1 Поручение на списание/перечисление/перевод денежных средств
                var pno = files_list.match(/^P(NO|PD|KO)\w+\.(xml|vrb)$/igm);
                // 2.7.1 Решение об отзыве не исполненных поручений на списание и перечисление денежных средств со счетов налогоплательщиков
                var apz = files_list.match(/^APZ\w+\.(xml|vrb)$/igm);
                // 2.8.1, 2.9.1, 2.10.1 Запрос о предоставлении справки о наличии счетов/остатках/выписок (ZNO..txt - удалить позже)
                var zno = files_list.match(/^Z(NO|SN|SO|SV)\w+\.(xml|vrb)$/igm);
                // 2.11.1, 2.12.1 Требование о перечислении налога, сбора, пени, штрафа в бюджетную систему РФ, об уплате денежной суммы по банковской гарантии
                var trb = files_list.match(/^TR(B|G)\w+\.(xml|vrb)$/igm);
                // 2.13.1 Справка о наличии счетов, вкладов, депозитов
                var bns = files_list.match(/^(BNS|ZBN1)\w+\.(xml|vrb)$/igm);
                // 2.14.1 Справка об остатках денежных средств на счетах
                var bos = files_list.match(/^(BOS|RBN1|ZBO1)\w+\.(xml|vrb)$/igm);
                // 2.15.1 Выписка по операциям на счетах (BV\d..txt - удалить позже)
                var bvs = files_list.match(/^(BV\d|BVS|BVD|ZBV1)\w+\.(xml|vrb)$/igm);
                // 2.16.1 Сообщение о неисполнении (частичном исполнении).если инк.пор помещено в картотеку 2
                var bnp = files_list.match(/^BNP\w+\.(xml|vrb)$/igm);

                // п.3.1.1 Извещение, формируемое подразделениями Банка России
                var izv = files_list.match(/^IZV\w+\.(xml|vrb)$/igm);
                // п.3.2.1 Подтверждение о получении
                var pb1 = files_list.match(/^PB1\w+\.(xml|vrb)$/igm);
                // п.3.2.1 Подтверждение о невозможности исполнения
                var pb2 = files_list.match(/^PB2\w+\.(xml|vrb)$/igm);
                // п.3.3.1 Извещение, формируемое МИ ФНС России по ЦОД
                var kwt = files_list.match(/^KWT\w+\.(xml|vrb)$/igm);
                // п.3.4.1, 3.5.1 Уведомление, формируемое ТУ Банка России при заключении (расторжении, изменении условий) соглашения
                var dsb = files_list.match(/^(DSB|BUV)\w+\.(xml|vrb)$/igm);
                // п.3.6.1 Запрос на повторное получение квитанции налогового органа
                var bz1 = files_list.match(/^BZ1\w+\.(xml|vrb)$/igm);

                var fmt =   '{0} <s>({1})</s> ';
                var fmtPB = '{0} {1} <s>({2})</s> ';
                var fclr = '#990000';
                if (rpo) { //решение о приост.
                    info[info_cnt++] = fmt.format('приост.'.fontcolor(fclr), rpo.length);
                }
                if (roo) { //отмена решения
                    info[info_cnt++] = fmt.format('отмена'.fontcolor(fclr), roo.length);
                }
                if (pno) { //поручение
                    info[info_cnt++] = fmt.format('поруч.'.fontcolor(fclr), pno.length);
                }
                if (apz) { //решение об отзыве
                    info[info_cnt++] = fmt.format('отзыв'.fontcolor(fclr), apz.length);
                }
                if (zno) { //запрос
                    info[info_cnt++] = fmt.format('запрос'.fontcolor(fclr), zno.length);
                }
                if (trb) { //требование
                    info[info_cnt++] = fmt.format('треб.'.fontcolor(fclr), trb.length);
                }
                if (bns) { //нал.счетов
                    info[info_cnt++] = fmt.format('счета', bns.length);
                }
                if (bos) { //свед. об остатках
                    info[info_cnt++] = fmt.format('остатки', bos.length);
                }
                if (bvs) { //выписка
                    info[info_cnt++] = fmt.format('выписка', bvs.length);
                }
                if (bnp) { //сообщ. о неисп.
                    info[info_cnt++] = fmt.format('неисп.', bnp.length);
                }
                if (izv) { //извещение
                    info[info_cnt++] = fmt.format('изв.', izv.length);
                }
                if (pb1) { //подтв.
                    info[info_cnt++] = fmtPB.format('подтв.', 'PB1'.fontcolor('green'), pb1.length);
                }
                if (pb2) { //подтв.
                    info[info_cnt++] = fmtPB.format('подтв.', 'PB2'.fontcolor('red'), pb2.length);
                }
                if (kwt) { //квит.
                    info[info_cnt++] = fmt.format('квит.', kwt.length);
                }
                if (dsb) { //уведомление
                    info[info_cnt++] = fmt.format('увед.', dsb.length);
                }
                if (bz1) { //запрос повт.кв.
                    info[info_cnt++] = fmt.format('повт.кв.', bz1.length);
                }
                break;
        }
        return info.join('');
    }

    // Извлечение информации о посылке из ее текста (если она - один файл)
    function GetContentInfoFromFileText(text, post_type) {
        if (RowOfDBTable.filetype === 'ИЭС1') { // находим, на какую форму пришел ответ
            switch (post_type) {
                case 'sa':
                    var tmp = [], tmp_cnt = 0;
                    var bank_code = INI.bank_code;
                    var re = new RegExp('F' + bank_code + '(\\w{2,5})\.zip', 'gi');
                    while (re.exec(text)) {
                        tmp[tmp_cnt++] = 'на ' + RegExp.$1;
                    }
                    if (tmp_cnt) {
                        return tmp.join(', ');
                    }
                    break;
                case '2z': // 311П
                    return /nRec="(\d+)"/.test(text) ? '<s> ({0})</s>'.format(RegExp.$1) : '';
            }
        } else if (RowOfDBTable.filetype === 'ИЭС2') { // находим, на какую форму пришел ответ
            switch (post_type) {
                case '0z': // 321П
                    if (/Отвергнутых: (\d+)/m.test(text)) {
                        var err = RegExp.$1;
                        if (err === '0') {
                            count_ok++;
                            return '<s>отвергнутых нет</s>';
                        } else {
                            count_bad++;
                            return 'отвергнутых {0}!'.format(err);
                        }
                    }
                    break;
            }
        }

        if (/ИмяФайлаЭС="([^"]*)"/.test(text)) {
            return '<s> {0}</s>'.format(RegExp.$1);
        } else if (/BGM\+(\w{2}:\d{7})'/.test(text)) {
            return '<s> {0}</s>'.format(RegExp.$1);
        } else {
            return '';
        }
    }

    // Подсветка всего текста (включая заголовки с именами файлов)
    function HighlightTextWithHeaders(text) {
        if (RowOfDBTable.posttype === 'sa') { // подсветка наименования посылки в имени файла SA посылки
            var bank_code = INI.bank_code;
            var re = new RegExp('(F' + bank_code + ')(\\w{2,5})(\.zip)', 'gi');
            text = text.replace(re, '$1<q>$2</q>$3');
        }
        return text;
    }

    // Извлекает содержимое одной посылки в массив arrFilesList и возвращает стринг html_text
    function GetPostContent(filepath) {
        function UnpackArchive(filepath, level) {
            var span = '<span disabled>- - - {0} - - -</span>';
            // Обработка содержимого сообщения (подсветка, подсказки, удаление лишнего)
            function HighlightText(text, filename) {
                if (/^BV\d{3}_ZNO\w+\.vrb$/i.test(filename)) { // выписка на запрос 365П
                    text = text.replace(/ДатаОпер:.*?<br>###<br>/g, 'Op').replace(/(Op)+/g,
                        '<s>--- Перечень операций скрыт от просмотра, ввиду их большого объема ---</s><br>');
                } else if (/^ZNO\w+\.vrb$/i.test(filename)) { // запрос 365П
                    text = text
                        .replace(/(<br>ВидЗапр:1)/m, '$1 <q>(запрос о наличии счетов в банке)</q>')
                        .replace(/(<br>ВидЗапр:2)/m, '$1 <q>(запрос об остатках денежных средств на счете)</q>')
                        .replace(/(<br>ВидЗапр:3)/m, '$1 <q>(запрос выписки по операциям на счете)</q>')
                        .replace(/(<br>ТипЗапр:1)/m, '$1 <q>(по всем счетам)</q>')
                        .replace(/(<br>ТипЗапр:2)/m, '$1 <q>(по указанным в запросе счетам)</q>');
                } else if (/^(IZV|PB|KWT)\w+\.vrb$/i.test(filename)) { // подтверждение, извещение, квитанция 365П
                    text = text
                        .replace(/(<br>10@@@|<br>01@@@|<br>20@@@)/m, '$1 <q>(положительный результат проверки)</q>')
                        .replace(/<br>(\d\d)@@@/g, '<br><q>$1</q>@@@')
                        .replace(/<br>(\d\d);([^@]+)@@@/, '<br><q>$1</q>;<i>$2</i>@@@');
                } else if (/^(IZV|KWT)\w+\.xml$/i.test(filename)) { // извещение или квитанция 440П
                    if (/КодРезПроверки="(\d{2})"/.test(text)) {
                        if (RegExp.lastParen === '01') {
                            count_ok++;
                            text = text
                                .replace(/КодРезПроверки="(\d{2})"/, 'КодРезПроверки="<q>$1</q>"')
                                .replace(/Пояснение="([^"]+)"/m, 'Пояснение="<q>$1</q>"');
                        } else {
                            count_bad++;
                            text = text
                                .replace(/КодРезПроверки="(\d{2})"/, 'КодРезПроверки="<i>$1</i>"')
                                .replace(/Пояснение="([^"]+)"/m, 'Пояснение="<i>$1</i>"');
                        }
                    }
                } else if (/\.xml$/i.test(filename)) {
                    text = text
                        //.replace(/ИмяФайлаЭС="([^"]+)"/m, 'ИмяФайлаЭС="<q>$1</q>"');
                        .replace(/="([^"]+)"/m, '="<q>$1</q>"');
                }

                if (RowOfDBTable.state_ == '7') { // подсветка только для полученных
                    if (!text.match(/Принятых: \d+/)) { // 0z
                        text = text.replace(/(не\s+)?(принята|принято|принят)/ig, function(s, s1) {
                            if (s1) {
                                count_bad++;
                                return '<i>{0}</i>'.format(s);
                            } else {
                                count_ok++ ;
                                return '<q>{0}</q>'.format(s);
                            }
                        });
                    }
                    if (/\.xml$/i.test(filename)) {
                        text = text.replace(/ не содержит ошибок/,
                            function(s) {
                                count_ok++;
                                return '<q>{0}</q>'.format(s);
                            });
                        text = text.replace(/ имеются предупреждения/,
                            function(s) {
                                count_bad++;
                                return '<i>{0}</i>'.format(s);
                            });
                        text = text.replace(/ содержит ошибки/,
                            function(s) {
                                count_bad++;
                                return '<i>{0}</i>'.format(s);
                            });
                    }
                    if (/^NS1\w+\.xml$/i.test(filename)) {
                        text = text.replace(/ ЭС получено/,
                            function(s) {
                                count_ok++;
                                return '<q>{0}</q>'.format(s);
                            });
                    } else if (/^SB\w+\.txt$/i.test(filename)) { // ответы на 311П
                        if (/<br>КодОшибки:(\d{3})/.test(text)) {
                            if (RegExp.lastParen !== '000') {
                                text = text.replace(/<br>НаимОшибки:([^<]+)/gm, '<br>НаимОшибки:<i>$1</i>');
                            }
                        }
                    }
                    if (RowOfDBTable.error_ > '0') {
                        count_bad++;
                    }
                }
                return text;
            }

            var files_list = [];
            var filename;
            if (IsArchive(filepath)) {
                files_list = Unpack(filepath);
            }
            var files_count = files_list.length;
            if (files_count) {
                var temp = INI.temp;
                for (var i = 0; i < files_count; i++) {
                    filename = files_list[i];
                    if (/(card\.inf|metaimp\.dat|\.elo|\.xsd|menu|\.sig|\.sign)$/i.test(filename)) {
                        continue; // игнорировать эти нечитаемые и служебные файлы
                    }
                    arrFilesList.push(filename);
                    html_text.push('<DIV><P id=N>{0}</P>'.format(filename));
                    if (/CB_ES550P_20\d{6}_\d{3}\.xml$/i.test(filename)) { // списки по 550П
                        html_text.push(span.format('содержимое зашифровано'));
                    } else if (/\.(xls|xlsx|doc|docx|tif|dbf|pdf)$/i.test(filename)) {
                        html_text.push(span.format('содержимое скрыто'));
                    } else {
                        UnpackArchive(FSO.BuildPath(temp, filename), level + 1);
                    }
                    html_text.push('</DIV>');
                }
            } else if (level === 0) {
                filename = filepath.match(/[\/|\\]([^\\\/]+)\.\d{6}$/)[1];
                html_text.push('<DIV><P id=N>{0}</P>'.format(filename));
                if (/\.(xls|xlsx|doc|docx|tif|pdf)$/i.test(filename)) {
                    html_text.push(span.format('содержимое скрыто'));
                } else if (/\.(ka|sig|sign)$/i.test(filename)) {
                    html_text.push(span.format('электронная подпись'));
                } else {
                    UnpackArchive(filepath, level + 1);
                }
                html_text.push('</DIV>');
            } else {
                // ------- содержимое файла ------------------
                var text = DecryptSignatura(filepath);
                if (text) {
                    if (/\.vrb$/i.test(filepath)) {
                        text = span.format('содержимое должно быть зашифровано');
                    } else if (/\.arj$/i.test(filepath)) {
                        UnpackArchive(filepath, level + 1);
                    } else if (/[\x00-\x08\x10-\x1B]/.test(text)) {
                        text = span.format('нечитабельное содержимое (возможно зашифровано)');
                    } else if (/\.xml($|\.\d{6}$)/i.test(filepath)) {
                        if (/^<\?xml/i.test(text)) {
                            if (/\\VBK.+?\.xml$/i.test(filepath)) {
                                // для файлов VBK*.xml () используем упрощенную обработку (удаляем все теги)
                                text = text.replace(/<.+?>/g, '');
                            } else { // обработка XML
                                if (/^<\?xml.* encoding=["']utf-8["']*/i.test(text)) {
                                    text = Recode(text, 'utf-8', 'windows-1251');
                                }
                                //Base64
                                text = text
                                    .replace(/>([A-Z0-9+\/=]{4})*<\/ЭС>/ig, '></ЭС>')
                                    .replace(/<КА [^>]*>([A-Z0-9+\/=]{4})*<\/КА>/ig, '');
                                var aText = [], text_cnt = 0;
                                //var re = /<([А-я\w]+ *)([^>]*)>([^<\r\n]*)/ig;
                                var re = /<([А-я\w]+ *)([^>]*)>([^<]*)/ig;
                                while (re.exec(text)) {
                                    aText[text_cnt++] = '<u><b>{0}</b>{1}</u> {2}'
                                        .format(RegExp.$1, (RegExp.$2 || '').replace(/\/+$/, ''), (RegExp.$3 || ''));
                                }
                                text = aText.join('<br>');
                                //if (/Содержит="((ОЭС|ИЭС\d))"/.test(text)) {
                                //    PostList.idRow[id].cells[1].innerHTML = RegExp.$1;
                                //}
                                text = text
                                    .replace(/xmlns\s*=\s*"[^"]*"/, '')
                                    .replace(/УникИд[^=]*="[^"]*"/g, '');
                            }
                        } else {
                            text = span.format('не XML содержимое (возможно зашифровано)');
                        }
                    } else {
                        // только такие вложенные в архивы файлы все еще приходят в кодировке 866:
                        if ((/(\\BV\d{3}_.+?\.txt|\\BOS\d_.+?\.txt|\\KWTFCB_.+?\.txt|\\TL.+?\.txt|\\IA.+?\.log|\\PB\d_.+?\.txt|\\UVKESDT.+?\.txt|\\ZAS1.+?\.txt|\.0[1-9][0-9])$/i)
                            .test(filepath)) {
                            text = Recode(text, 'cp866', 'windows-1251');
                        }
                        text = text.replace(/[\r\n]+/g, function() {
                            return '<br>';
                        });
                    }
                    filename = FSO.GetFileName(filepath);
                    text = HighlightText(text, filename);
                    html_text.push(text);
                }
            }
        }

        var tmp = FSO.BuildPath(INI.temp, '*.*');
        if (FSO.FileExists(tmp)) {
            FSO.DeleteFile(tmp, true);
        }
        var html_text = [];
        UnpackArchive(filepath, 0); // начало рекурсии
        return html_text.join('');
    }

    // ---------------------------------------------------
    var content_state = 'black'; //default

    if (!FSO.FileExists(filepath)) {
        content_state = 'red';
        return {
            state:   content_state,
            preview: 'Запись "{0}" имеется в базе данных, но такой файл не найден на диске!'
                .format(filepath).fontcolor(content_state)
        };
    }

    var arrFilesList = [];
    var content_preview = GetPostContent(filepath); // Ф-ция заполняет arrFilesList значениями

    // ---- добавление в строку со списком дополнительной информации о посылке ----
    var content_info = [];
    var al = arrFilesList.length;
    if (al) {
        content_info.push('<s>', arrFilesList[0]);
        if (al > 1) {
            content_info.push('+');
        }
        content_info.push('</s> ');
        // инфа извлекается из списка файлов, содержащихся в посылке
        content_info.push(GetContentInfoFromFilesList(arrFilesList.join('\n'), RowOfDBTable.posttype));
    }
    if (content_info.length === 0 || RowOfDBTable.posttype !== 'sa') {
        // инфа извлекается из текста распакованной посылки (того, что показывается в нижнем окне)
        content_info.push(GetContentInfoFromFileText(content_preview, RowOfDBTable.posttype));
    }
    if (RowOfDBTable.filetype === 'ИЭС3') {
        content_info.push('<s>подтв. о получении</s>');
    }
    // ---------------------------------------------------

    content_preview = HighlightTextWithHeaders(content_preview);
    // устанавливаем флаг того, что у нас в кеше имеются уникальные данные
    INI.cache_contains_unique_data = true;

    if (RowOfDBTable.filetype === 'ОЭС') {
        content_state = 'blue';
    } else if (RowOfDBTable.filetype === 'ИЭС3') {
        content_state = 'gray';
    } else if (count_bad) {
        content_state = 'red';
    } else if (count_ok) {
        content_state = 'green';
    }

    return {
        state:   content_state,
        info:    content_info.join(''),
        preview: content_preview
    };
}

//=====================================================
//  СОСТАВЛЕНИЕ СПИСКА РЕЙСОВ
//=====================================================

function Status(text) {
    Preview.document.body.innerHTML = text;
}

// Создание выборки из БД (по выставленным на панели инструментов датам и типам сообщений)
function CreateDBSelect() {
    if (!CorrectDate(Toolbar.idDateInput[0]) || !CorrectDate(Toolbar.idDateInput[1])) {
        return;
    }

    Status('Загрузка посылок...');
    var forms = INI.allowed_forms;
    var tb = Toolbar.idPostType;
    var tb_posttype = tb.options[tb.selectedIndex].value;
    var posttype = (tb_posttype === '*') ?
        ' IN ({0})'.format(forms) : "='{0}'".format(tb_posttype);
    var sql_posts = 'SELECT * FROM elo_arh_post WHERE posttype{0} '.format(posttype) +
        'and dt between ? and ? ORDER BY posttype, dt, filetype';
    var sql_forms = 'SELECT DISTINCT posttype FROM elo_arh_post WHERE posttype IN ({0}) '.format(forms) +
        'and dt between ? and ?';
    var period = [
        GetDate(0, Toolbar.idDateInput[0].value, true),
        GetDate(1, Toolbar.idDateInput[1].value, true)
    ];
    arrDB = QueryDatabase(sql_posts, period);
    UpdateFormsList(QueryDatabase(sql_forms, period));
}

// Клик мыши по курсорной строке
function onMouseup() {
    SelectRow(id_cursor);
    if (PostList.event.button === 2) { // если нажата правая кнопка
        ShowContextMenu(PostList);
    }
}

// Составление списка рейсов
function CreatePostList() {
    // Возвращает имя формы по типу поста
    function GetFormName(post_type) {
        var tb = Toolbar.idPostType;
        for (var i = 0, l = tb.length; i < l; i++) {
            if (tb.options[i].value === post_type) {
                return tb.options[i].text;
            }
        }
    }

    function GetHTMLTable(arrDB) {
        var arrDB_length = arrDB.length;
        var form_name_prev = '';
        var RowOfDBTable, posttype, filename, state;
        var HTMLtable = [];
        HTMLtable.push('<table><tr id=idRow style="display:none"><td><td><td><td><td>');
        for (var i = 1; i < arrDB_length; i++) {
            // ------ Построение списка посылок -----------------------------------------------------------
            RowOfDBTable = arrDB[i];
            posttype = RowOfDBTable.posttype;
            if (posttype !== form_name_prev) {
                HTMLtable.push('<tr><th colspan=5>', GetFormName(posttype));
                form_name_prev = posttype;
            }
            filename = RowOfDBTable.filename.replace(/\.\d{6}$/, ''); //\.[^.]+$
            state = RowOfDBTable.state_;
            HTMLtable.push('<tr id=idRow ',
                'onmouseover="parent.id_cursor=', i, '; parent.PostList.idCursor.style.top = this.offsetTop - 1;">',
                '<td class="icon" style="color:black">',
                    (state == '6') ? '&#xDB;' :
                    (state == '7') ? '&#xDC;' : '',
                '<td style="color:black">', RowOfDBTable.filetype,
                '<td>',
                '<td><s>', Date2Log(new Date(RowOfDBTable.dt)), '</s>',
                '<td>', filename);
            // -----------------------------------------------------------------------------------------
        }
        HTMLtable.push('</table>',
            '<table id="idCursor" onmouseup="parent.onMouseup();" ',
            'style="position:absolute; width:100%; top:-20px; font-size:14px;',
            'border-collapse:collapse; border-top:1px dotted highlight; border-bottom:1px dotted highlight;">',
            '<tr><td>&nbsp;</td></tr></table>');
        return HTMLtable.join('');
    }

    function SetHTMLTable(arrDB) {
        var arrDB_length = arrDB.length;
        var percent, percent_prev = 0, done;
        breakLoad = false;
        var html = [
            '<table><tr><td>Загрузка содержимого файлов...',
            '<td align="right"><input id="idBreak" type="button" value="Прервать" ',
            'title="Остановить загрузку!" onClick="parent.breakLoad=true;" />',
            '<td width="50%"><div id=idProgress style="width:' //...
        ].join('');
        var post_content, Row, color;
        for (var i = 1; i < arrDB_length; i++) {
            post_content = GetCachedContent(arrDB[i]);
            color = post_content.state;
            Row = PostList.idRow[i].cells;
            Row[0].style.color = color;
            Row[1].style.color = color;
            Row[2].innerHTML = post_content.info;
            // -----------------------------------------------------------------------------------------
            percent = Math.round(i / arrDB_length * 100);
            if (percent > percent_prev) {
                done = percent + '%';
                Status([html, done, '">', done, '</div>'].join(''));
                percent_prev = percent;
            }
            if (breakLoad) {
                break;
            }
        }
    }

    if (!INI.DataBase.db_connect_string) {
        PostList.document.body.innerHTML = 'Нет связи с базой данных ПТК ПСД'.fontcolor('red');
        Toolbar.idToolbar.disabled = false;
        return;
    }
    // -----------------------------------------------
    if (arrDB.length > 0) {
        Status('Загрузка форм...');
        // добавляем пустышку для того, чтобы к узлам idRow всегда можно было обратиться по индексу
        arrDB.unshift({}); // добавляем пустышку в начало массива, чтобы индекс его элементов соответствовал индексу узлов
        PostList.document.body.innerHTML = GetHTMLTable(arrDB);

        Status('Загрузка содержимого файлов...');
        SetHTMLTable(arrDB);

        Status(breakLoad ?
            'Загрузка была прервана' : 'Выберите посылку для просмотра'.fontcolor('green'));
    } else {
        PostList.document.body.innerHTML = '<center><span disabled>пусто</span></center>';
        Status('Выберите дату для просмотра'.fontcolor('green'));
    }
    setTimeout(SaveCache, 0);
    Toolbar.idToolbar.disabled = false;
    id_selected = undefined;
}

// Запуск функции CreatePostList отдельным процессом
function StartCreatePostList(shiftKey) {
    HidePreview();
    if (shiftKey) {
        DeleteCache();
    }
    find_text = '';
    Status('Загрузка таблицы...');
    Toolbar.idToolbar.disabled = true;
    setTimeout(function() {
        CreateDBSelect();
        CreatePostList();
    }, 0);
}

//=====================================================
//  ФУНКЦИИ СТАРТА
//=====================================================

// Папка, где проверять автообновления
function AutoUpdateHTA() {
    var path = INI.Path.FORM;
    return path ? FSO.BuildPath(path, 'PTK_PSD_Browser\\PTK_PSD_Browser.hta') : INI.hta;
}

// Получение номера версии указанного файла HTA
function HTAFileVer(hta) {
    var version = 'нет';
    var file = FSO.OpenTextFile(hta, 1);
    var line;
    while (!file.AtEndOfStream) {
        if (file.Line > 50) {
            break;
        }
        line = file.ReadLine();
        if (/version=\"(\d*\.\d*\.\d*)\"/i.test(line)) {
            version = RegExp.$1;
            break;
        }
    }
    file.Close();
    return version;
}

// Действия при старте приложения
function Start() {
    function LoadActiveX() {
        var caption = 'Создание объектов ActiveX';
        try { // Инициализация объектов ActiveX
            WshShell = new ActiveXObject('WScript.Shell');
            FSO = new ActiveXObject('Scripting.FileSystemObject');
        } catch (e) {
            ErrBox('Установите Windows Script Host', caption);
            return false;
        }
        return true;
    }

    function CheckINIs() {
        var caption = 'Чтение INI-файлов';
        var args = ReadArgs();
        var ini1, ini2;
        switch (args.length - 1) {
            case 2: //hta elo.ini browser.ini
                ini1 = WshShell.ExpandEnvironmentStrings(args[1]);
                ini2 = WshShell.ExpandEnvironmentStrings(args[2]);
                break;
            case 1: //hta elo.ini
                ini1 = WshShell.ExpandEnvironmentStrings(args[1]);
                ini2 = FSO.BuildPath(INI.path, 'PTK_PSD_Browser.ini');
                break;
            default: //hta only
                ini1 = FSO.BuildPath(WshShell.ExpandEnvironmentStrings('%WINDIR%'), 'elo.ini');
                ini2 = FSO.BuildPath(INI.path, 'PTK_PSD_Browser.ini');
        }

        ReadINIFile(ini1);
        ReadINIFile(ini2);

        INI.hta = args[0];
        INI.elo = ini1;
        INI.ini = ini2;
        INI.argc = args.length - 1;

        // Задание временного каталога прежде всего!
        var temp = FSO.BuildPath(WshShell.ExpandEnvironmentStrings('%TEMP%'), '${0}$'.format(PtkBro.id));
        if (!FSO.FolderExists(temp)) {
            FSO.CreateFolder(temp);
        }
        INI.temp = temp;
        return true;
    }

    // Централизованное обновление версий с эталона на сервере
    function CheckUpdate() {
        var caption = 'Проверка обновлений';
        var distr = AutoUpdateHTA();
        var destn = INI.hta;
        if (distr === destn) {
            return true; // same file
        }
        var distr_version = PtkBro.version;
        if (FSO.FileExists(distr)) {
            distr_version = HTAFileVer(distr);
        } else {
            return true; // no distr
        }
        if (distr_version === 'нет') {
            return true; // no valid version
        }
        if (distr_version === PtkBro.version) {
            return true; // same version
        }
        if (cmpVersions(PtkBro.version, distr_version) > 0) {
            return true; // new version under development
        }

        try {
            SaveFile(destn + '.tmp', 'test');
        }
        catch (e) {
            MsgBox('Ваша версия {0} устарела и должна быть обновлена до {1},\nно на это нет прав!'
                .format(PtkBro.version, distr_version), caption);
            return false;
        }
        FSO.DeleteFile(destn + '.tmp');

        // Возвращает ProcessId нашего приложения
        var pid = WshShell.Exec('rundll32 kernel32,Sleep').ProcessID;
        var oProc = new Enumerator(GetObject('winmgmts:\\\\.\\root\\cimv2')
            .ExecQuery('select * from Win32_Process where ProcessId={0}'.format(pid))).item();
        var parent_id = oProc.ParentProcessId;

        // Подготовка скрипта для обновления новой версией с сервера
        var this_script = unescape(document.URL).replace(/^file:\/\//, '');
        var rst_text = [
            '@echo off',
            'chcp 1251 > nul',
            'ping -n 3 -w 1000 127.0.0.1 > nul',
            'taskkill /f /pid ' + parent_id,
            'ping -n 2 -w 1000 127.0.0.1 > nul',
            'copy/y "{0}" "{1}" > nul'.format(distr, destn),
            'start "" "{0}"'.format(this_script)
        ]; //'PTK_PSD_Browser.hta'
        var cmd = FSO.BuildPath(INI.temp, '_restart.cmd');
        SaveFile(cmd, rst_text.join('\n'));

        // Запуск приложения новой версии
        WshShell.Run(cmd, 0, true);
        oProc.Terminate();
        return true;
    }

    function Check7Zip() {
        var caption = 'Проверка 7-Zip';
        var unpacker = INI.BrowserSettings.unpacker || 'bin\\7z.exe';
        if (!FSO.FileExists(unpacker)) {
            unpacker = 'C:\\Program Files\\7-Zip\\7z.exe';
        }
        if (!FSO.FileExists(unpacker)) {
            ErrBox('Не найден архиватор\n{0}'.format(unpacker), caption);
            return false;
        }
        var ver = UnpackerVer(unpacker);
        if (ver) {
            ver = ver[2];
        } else {
            ErrBox('Неизвестный архиватор\n{0}'.format(unpacker), caption);
            return false;
        }
        var cmd = '%comspec% /c ("{0}" e -y -o"{1}"'.format(unpacker, INI.temp);
        switch (ver) {
            case '4': // no options
                break;
            case '9':
                cmd += ' -sccWIN'; // console output in 1251
                break;
            default: //15+
                ver = '15+';
                cmd += ' -sccWIN -bb'; // verbose mode like before
        }
        INI.BrowserSettings.unpacker = unpacker;
        INI.unpacker_ver = ver;
        INI.unpacker_cmd = cmd;
        return true;
    }

    function CheckPaths() {
        var caption = 'Проверка путей и файлов';
        var store = INI.Path.ARCHIVESTORE;
        if (!store || !FSO.FolderExists(store)) {
            store = '..\\Post\\Store';
            if (FSO.FolderExists(store)) {
                INI.Path.ARCHIVESTORE = store;
            } else {
                ErrBox(['Не найден каталог архива посылок ПТК ПСД (Path.ARCHIVESTORE)', 
                    INI.Path.ARCHIVESTORE].join('\n'), caption);
                return false;
            }
        }
        var cache = INI.BrowserSettings.cache;
        if (cache) {
            if (/^(%|[A-Z]:\\|\\\\)/i.test(cache)) {
                cache = WshShell.ExpandEnvironmentStrings(cache);
            } else {
                cache = FSO.BuildPath(INI.path, cache);
            }
            if (!/\{0\}/.test(cache)) {
                cache = cache.replace(/^(.*)\.(.*)$/, '$1-{0}.$2');
            }
            cache = cache.format(PtkBro.version);
        }
        INI.cache = cache;

        var bic = INI.User.CurBik;
        INI.bank_code = bic ? bic.replace(/.*(\d{3})$/, '$1') : '\d{3}';

        Toolbar.idByPostType.checked = INI.BrowserSettings.by_posttype_checked === '1';
        return true;
    }

    function CheckDB() {
        var caption = 'Подключение к базе';
        var password = INI.DataBase.password;
        if (password !== undefined) {
            var m = password.match(/(\d{4})/g);
            if (m && m.join('') === password) {
                password = PassDecrypt(password);
            } else {
                password = prompt('Введите пароль доступа к базе данных:', '');
                if (!password) {
                    ErrBox('Не задан пароль доступа', caption);
                    return false;
                }
                var ini = INI.ini;
                var text = ReadFile(ini);
                text = text.replace(/^(password=).*$/im, '$1' + PassEncrypt(password));
                SaveFile(ini, text);
            }
        }

        var user = INI.DataBase.user;
        var db_connect_string = INI.DataBase.db_connect_string;
        if (db_connect_string) {
            if (user) {
                db_connect_string = db_connect_string.replace(/%user%/, user);
            }
            if (password) {
                db_connect_string = db_connect_string.replace(/%password%/, password);
            }
            INI.DataBase.db_connect_string = db_connect_string;
            return true;
        }

        var ODBC = INI.DataBase.ODBC;
        if (ODBC) {
            db_connect_string = 'DSN={0};'.format(ODBC);
            if (user) {
                db_connect_string += 'UID={0};'.format(user);
            }
            if (password) {
                db_connect_string += 'PWD={0};'.format(password);
            }
            INI.DataBase.db_connect_string = db_connect_string;
            return true;
        }

        var FDSN = INI.DataBase.FILEDSN;
        if (FDSN) {
            if (!FSO.FileExists(FDSN)) {
                ErrBox(['Не найден файловый DSN', FDSN].join('\n'), caption);
                return false;
            }
            db_connect_string = 'FILEDSN={0};'.format(FDSN);
            if (user) {
                db_connect_string += 'UID={0};'.format(user);
            }
            if (password) {
                db_connect_string += 'PWD={0};'.format(password);
            }
            INI.DataBase.db_connect_string = db_connect_string;
            return true;
        }

        AccessOrSQL = 1;
        var database = '..\\Database\\etalon97.mdb';
        if (!FSO.FileExists(database)) {
            var etalon = database + '.7z';
            if (FSO.FileExists(etalon)) {
                var files = Unpack(etalon);
                FSO.MoveFile(FSO.BuildPath(INI.temp, files[0]), '..\\Database\\');
                if (!FSO.FileExists(database)) {
                    ErrBox(['Не удалось распаковать файл базы данных', database, '',
                        'Используйте 7-Zip, чтобы распаковать', etalon].join('\n'), caption);
                    return false;
                }
            } else {
                ErrBox(['Не найден файл базы данных по умолчанию', database,
                    'Не задан каталог установки ПТК ПСД (Path.FORM)?'].join('\n'), caption);
                return false;
            }
        }
        db_connect_string = 'Driver={Microsoft Access Driver (*.mdb)};DBQ={0}'
            .format(database);
        INI.DataBase.db_connect_string = db_connect_string;
        return true;
    }

    // Проверка зарегистрирован ли пользователь?
    function CheckUser() {
        var caption = 'Подключение пользователя';
        var usrname = INI.User.CurUser;
        if (!usrname) {
            usrname = WshShell.ExpandEnvironmentStrings('%username%');
        } else if (/%.+?%/i.test(usrname)) {
            usrname = WshShell.ExpandEnvironmentStrings(usrname);
        }
        document.title += ' [{0}]'.format(usrname);

        var q = TryQueryDatabase('SELECT usrname FROM elo_users');
        if (q.Error) {
            ErrBox(['Нет связи с базой данных', q.Description].join('\n'), caption);
            INI.DataBase.db_connect_string = '';
            return false;
        }

        var all_users = q.Result;
        var usrnameLowerCase = usrname.toLowerCase();
        for (var i = 0, l = all_users.length; i < l; i++) {
            if (usrnameLowerCase === all_users[i].usrname.toString().toLowerCase()) {
                INI.User.CurUser = usrname;
                return true;
            }
        }
        ErrBox(['В ПТК ПСД не зарегистрирован', usrname].join('\n'), caption);
        return false;
    }

    document.title = '{0} - {1}'.format(PtkBro.applicationName, PtkBro.version);

    if (!LoadActiveX()) {
        return;
    }

    // Вычисляем путь к данному скрипту
    INI.path = unescape(document.URL).replace(/^file:\/\/(.+?)[^\\]+$/, '$1'); //args[0]?

    // Присвоение значений глобальным переменным и подключение к БД
    if (CheckINIs())
    if (CheckUpdate())
    if (Check7Zip())
    if (CheckPaths())
    if (CheckDB())
    if (CheckUser())
    {
        LoadCache();            // Загружаем кеш с сохраненными ранее данными
        load_RCMenu();          // Подготавливем контестное меню
        CreateFormList();       // Загружаем в раскрывающийся список <SELECT> имена обрабатываемых форм
        CheckCalendarActiveX(); // Инициализация (и установка при необходимости) AxCalendar
        SetInterval(0);         // Задаем интервал для выборки - текущий день

        Toolbar.idToolbar.disabled = false;
    } else {
        SystemInfo();
    }
    Resize();
}

// Действия при изменении размера окна
function Resize() {
    if (/(\d+)px,\s*\*\s*,(\d+)px/.test(top.document.getElementById('frameset').rows)) {
        top.document.getElementById('frameset').rows = '{0}px,*,{1}px'.format(Toolbar.idToolbar.scrollHeight, RegExp.$2);
    }
}

// Действия при завершении приложения
function BeforeUnload() {
    var temp = INI.temp;
    try { // Игнорируем все ошибки - срочный выход!
        var saveLeft = window.screenLeft;
        var saveTop  = window.screenTop;
        if (saveLeft !== 0 && saveTop !== 0) { // Если окно не распахнуто
            window.moveTo(saveLeft, saveTop);
            var padXY = PadXY;
            Cookie('window', [
                saveLeft + (saveLeft - window.screenLeft),
                saveTop  + (saveTop  - window.screenTop),
                document.documentElement.clientWidth  + padXY[0],
                document.documentElement.clientHeight + padXY[1]
            ].join(','));
        }
        if (FSO.FolderExists(temp)) {
            FSO.DeleteFolder(temp, true);
        }
    }
    catch (e) {
    }
}

function SystemInfo() {
    function detectIE() {
        var ua = window.navigator.userAgent;

        // Test values; Uncomment to check result …

        // IE 10
        // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
        
        // IE 11
        // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
        
        // Edge 12 (Spartan)
        // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
        
        // Edge 13
        // ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';

        var msie = ua.indexOf('MSIE ');
        if (msie > 0) {
            // IE 10 or older => return version number
            return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
        }

        var trident = ua.indexOf('Trident/');
        if (trident > 0) {
            // IE 11 => return version number
            var rv = ua.indexOf('rv:');
            return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
        }

        var edge = ua.indexOf('Edge/');
        if (edge > 0) {
            // Edge (IE 12+) => return version number
            return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
        }

        // other browser
        return false;
    }

    function Archiver() {
        var unpacker = INI.BrowserSettings.unpacker;
        var out = ExecHide('"{0}"'.format(unpacker));
        if (out.ExitCode === 0) {
            var ver = out.Output.match(/^7-Zip (.+)$/m);
            if (ver) {
                return ver[0];
            }
        }
        return unpacker;
    }

    function Support() {
        return !/44030702/.test(INI.User.CurBik) ?
            '<tr><td>Контакты' +
            '<td><a href="mailto:support*dievdo.ru?subject=PTK-PSD">support<wbr>*dievdo.ru</a>'.replace('*', '@') +
            '<td><a href="http://dievdo.ru/PTK-PSD-Browser-hta/" target="_blank">http://dievdo.ru<wbr>/PTK-PSD-Browser-hta/</a>'
            : '';
    }

    OpenPreview();
    var distr = AutoUpdateHTA();
    var distr_version = 'нет';
    if (FSO.FileExists(distr)) {
        distr_version = HTAFileVer(distr);
    }
    var AoS = AccessOrSQL == 1 ? 'Access' : AccessOrSQL == 2 ? 'SQL' : '?';
    var db = INI.DataBase.db_connect_string;
    var store = FSO.BuildPath(INI.Path.ARCHIVESTORE, Date2Path(new Date()));
    var Store = FSO.FolderExists(store) ? FSO.GetFolder(store) : null;
    var fCount = Store ? Store.Files.Count : 0;
    var fSize = Store ? Store.Size : 0;
    var cache = INI.cache;
    var html = [
        '<table width=100% border=1>',
        '<tr><th colspan=3>Системная информация',
        '<tr><td>Программа<td>', PtkBro.version, '<td>', PtkBro.commandLine /*INI.hta*/,
        '<tr><td>elo.ini<td>',     INI.argc > 0 ? 'param 1' : '[default]', '<td>', INI.elo,
        '<tr><td>browser.ini<td>', INI.argc > 1 ? 'param 2' : '[default]', '<td>', INI.ini,
        '<tr><td>Автообновление<td>', distr_version, '<td>', distr,
        '<tr><td>Банк<td>', /\d{3}/.test(INI.bank_code) ? INI.bank_code : '', '<td>', INI.User.CurBik,
        '<tr><td>Пользователь<td>', INI.User.CurUser,
            '<td>Windows: ', WshShell.ExpandEnvironmentStrings("%USERNAME%"),
        '<tr><td>Тип базы<td>', AoS, '<td>', db ? db.replace(/PWD=([^;]+)?;/, 'PWD=****;') : 'нет подключения',
        '<tr><td>Строк в таблице<td>', 
            arrDB.length > 0 ? arrDB.length - 1 : 'нет',
                '<td>', store, '*.* (файлов: ', fCount, ', размер: ', fSize, ')',
        '<tr><td>Размер кеша<td>', 
            cache && FSO.FileExists(cache) ? FSO.GetFile(cache).Size : '0',
            '<td>', INI.cache,
        '<tr><td>Распаковка<td>%temp%<td>', INI.temp,
        '<tr><td>Распаковщик<td>', INI.unpacker_ver, '<td>', INI.BrowserSettings.unpacker, '<br>', Archiver(),
        '<tr><td>MSIE mode<td>', detectIE(), '<td>', window.navigator.userAgent,
        Support(),
        '</table>'
    ].join('');
    Status(html);
}
</script>
</head>
<frameset id=frameset rows="26px,*,265px" onLoad="setTimeout(Start, 0);"
    onresize="Resize();"
    onbeforeunload="BeforeUnload();">
    <frame name="Toolbar"  src="about:blank" onLoad="load_Toolbar();"
        application="yes" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" noresize />
    <frame name="PostList" src="about:blank" onLoad="load_PostList();"
        application="yes" marginwidth="0" marginheight="0" />
    <frame name="Preview"  src="about:blank" onLoad="load_Preview();"
        application="yes" marginwidth="4" marginheight="4" />
</frameset>
</html>
